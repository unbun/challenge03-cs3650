make: Nothing to be done for 'all'.
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
mkdir -p mnt || true
if [ ! -e disk0.cow ]; then ./cowtool new disk0.cow; fi
+ storage_init(disk0.cow);
+ alloc_page() -> 1
+ root_init() -> 1
+ alloc_page() -> 2
+ alloc_page() -> 3
+ alloc_page() -> 4
+ alloc_page() -> 5
+ alloc_inode() -> 0
+ add_root(0, init disk0.cow) -> ...
... new version: -> 1 
Created disk image: disk0.cow
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/one.txt)
getattr(/one.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/one.txt, 33204)
+ alloc_inode() -> 1
+ grow_inode( ... , 32) 
node_0{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 6
+ dirent_1 = 'one.txt'
mknod(/one.txt, 100664) -> 0
+ storage_stat(/one.txt)
getattr(/one.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/one.txt)
access(/one.txt, 0000) -> 0
open(/one.txt) -> 0
ioctl(/one.txt, 21505, ...) -> -1
+ alloc_inode() -> 2
+ copy( 1{size=0) ) ...
node_1{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 1{size=0} ) -> 2{size=0}
+ writing to page: 1
+ grow_inode( ... , 11) 
node_2{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 7
+ alloc_inode() -> 3
+ copy( 0{size=32) ) ...
node_0{ptrs: [6, 0], indir:0 size: 32}
+ alloc_page() -> 8
+ end of copy_inode( 0{size=32} ) -> 3{size=32}
	[DEBUG] old inum: 1; new inum: 2
	[DEBUG] adding root (/): 3
+ add_root(3, write /one.txt) -> ...
... new version: -> 2 
write(/one.txt, 11 bytes, @+0) -> 11
+ storage_stat(/one.txt)
getattr(/one.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/one.txt)
access(/one.txt, 0000) -> 0
open(/one.txt) -> 0
ioctl(/one.txt, 21505, ...) -> -1
+ storage_read(/one.txt); inode 2
node_2{ptrs: [7, 0], indir:0 size: 11}
read(/one.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 32}
+ storage_stat(/one.txt)
getattr(/one.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/two.txt)
getattr(/two.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/two.txt, 33204)
+ alloc_inode() -> 4
+ grow_inode( ... , 64) 
node_3{ptrs: [8, 0], indir:0 size: 32}
+ dirent_4 = 'two.txt'
mknod(/two.txt, 100664) -> 0
+ storage_stat(/two.txt)
getattr(/two.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/two.txt)
access(/two.txt, 0000) -> 0
open(/two.txt) -> 0
ioctl(/two.txt, 21505, ...) -> -1
+ alloc_inode() -> 5
+ copy( 4{size=0) ) ...
node_4{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 4{size=0} ) -> 5{size=0}
+ writing to page: 4
+ grow_inode( ... , 11) 
node_5{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 9
+ alloc_inode() -> 6
+ copy( 3{size=64) ) ...
node_3{ptrs: [8, 0], indir:0 size: 64}
+ alloc_page() -> 10
+ end of copy_inode( 3{size=64} ) -> 6{size=64}
	[DEBUG] old inum: 4; new inum: 5
	[DEBUG] adding root (/): 6
+ add_root(6, write /two.txt) -> ...
... new version: -> 3 
write(/two.txt, 11 bytes, @+0) -> 11
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
readdir(/) -> 0
+ storage_stat(/two.txt)
getattr(/two.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/two.txt)
getattr(/two.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/two.txt)
access(/two.txt, 0000) -> 0
open(/two.txt) -> 0
ioctl(/two.txt, 21505, ...) -> -1
+ storage_read(/two.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 11}
read(/two.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/two.txt)
getattr(/two.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
readdir(/) -> 0
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (-2) {mode: 00fusermount -u mnt || true
00, size: 0}
+ mknod (/2k.txt, 33204)
+ alloc_inode() -> 7
+ grow_inode( ... , 96) 
node_6{ptrs: [10, 0], indir:0 size: 64}
+ dirent_7 = '2k.txt'
mknod(/2k.txt, 100664) -> 0
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/2k.txt)
access(/2k.txt, 0000) -> 0
open(/2k.txt) -> 0
ioctl(/2k.txt, 21505, ...) -> -1
+ alloc_inode() -> 8
+ copy( 7{size=0) ) ...
node_7{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 7{size=0} ) -> 8{size=0}
+ writing to page: 7
+ grow_inode( ... , 2001) 
node_8{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 11
+ alloc_inode() -> 9
+ copy( 6{size=96) ) ...
node_6{ptrs: [10, 0], indir:0 size: 96}
+ alloc_page() -> 12
+ end of copy_inode( 6{size=96} ) -> 9{size=96}
	[DEBUG] old inum: 7; new inum: 8
	[DEBUG] adding root (/): 9
+ add_root(9, write /2k.txt) -> ...
... new version: -> 4 
write(/2k.txt, 2001 bytes, @+0) -> 2001
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/2k.txt)
access(/2k.txt, 0000) -> 0
open(/2k.txt) -> 0
ioctl(/2k.txt, 21505, ...) -> -1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (0) {mode: 100664, size: 2001}
+ storage_read(/2k.txt); inode 8
node_8{ptrs: [11, 0], indir:0 size: 2001}
read(/2k.txt, 4096 bytes, @+0) -> 2001
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (0) {mode: 100664, size: 2001}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/2k.txt)
access(/2k.txt, 0000) -> 0
open(/2k.txt) -> 0
ioctl(/2k.txt, 21505, ...) -> -1
+ storage_read(/2k.txt); inode 8
node_8{ptrs: [11, 0], indir:0 size: 2001}
read(/2k.txt, 4096 bytes, @+0) -> 2001
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (0) {mode: 100664, size: 2001}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (0) {mode: 100664, size: 2001}
+ storage_stat(/two.txt)
getattr(/two.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/one.txt)
getattr(/one.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
readdir(/) -> 0
+ storage_stat(/one.txt)
access(/one.txt, 0000) -> 0
open(/one.txt) -> 0
ioctl(/one.txt, 21505, ...) -> -1
+ storage_read(/one.txt); inode 2
node_2{ptrs: [7, 0], indir:0 size: 11}
read(/one.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/one.txt)
getattr(/one.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/two.txt)
access(/two.txt, 0000) -> 0
open(/two.txt) -> 0
ioctl(/two.txt, 21505, ...) -> -1
+ storage_read(/two.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 11}
read(/two.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/two.txt)
getattr(/two.txt) -> (0) {mode: 100664, size: 11}
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 0], indir:0 size: 11}
pnum(2[0]): 7


+ free_page(7)




node_2{ptrs: [7, 0], indir:0 size: 0}
+ shrink_inode( ... , 64) 
node_9{ptrs: [12, 0], indir:0 size: 96}
unlink(/one.txt) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
readdir(/) -> 0
+ storage_stat(/abc.txt)
getattr(/abc.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/abc.txt)
getattr(/abc.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/abc.txt)
getattr(/abc.txt) -> (-2) {mode: 0000, size: 0}
+ grow_inode( ... , 96) 
node_9{ptrs: [12, 0], indir:0 size: 64}
+ dirent_5 = 'abc.txt'
+ shrink_inode( ... , 64) 
node_9{ptrs: [12, 0], indir:0 size: 96}
rename(/two.txt => /abc.txt) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 64}
readdir(/) -> 0
+ storage_stat(/abc.txt)
access(/abc.txt, 0000) -> 0
open(/abc.txt) -> 0
ioctl(/abc.txt, 21505, ...) -> -1
+ storage_stat(/abc.txt)
getattr(/abc.txt) -> (0) {mode: 100664, size: 11}
+ storage_read(/abc.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 11}
read(/abc.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/abc.txt)
getattr(/abc.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/def.txt)
getattr(/def.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/def.txt)
getattr(/def.txt) -> (-2) {mode: 0000, size: 0}
+ grow_inode( ... , 96) 
node_9{ptrs: [12, 0], indir:0 size: 64}
+ dirent_5 = 'def.txt'
link(/abc.txt => /def.txt) -> 0
+ storage_stat(/def.txt)
getattr(/def.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/def.txt)
access(/def.txt, 0000) -> 0
open(/def.txt) -> 0
ioctl(/def.txt, 21505, ...) -> -1
+ storage_read(/def.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 11}
read(/def.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/def.txt)
getattr(/def.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/abc.txt)
getattr(/abc.txt) -> (0) {mode: 100664, size: 11}
+ shrink_inode( ... , 64) 
node_9{ptrs: [12, 0], indir:0 size: 96}
unlink(/abc.txt) -> 0
+ storage_stat(/def.txt)
access(/def.txt, 0000) -> 0
open(/def.txt) -> 0
ioctl(/def.txt, 21505, ...) -> -1
+ storage_read(/def.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 11}
read(/def.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/def.txt)
getattr(/def.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/foo)
getattr(/foo) -> (-2) {mode: 0000, size: 0}
+ mknod (/foo, 16893)
+ alloc_inode() -> 2
+ grow_inode( ... , 96) 
node_9{ptrs: [12, 0], indir:0 size: 64}
+ dirent_2 = 'foo'
mknod(/foo, 40775) -> 0
mkdir(/foo) -> 0
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 0}
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/def.txt)
access(/def.txt, 0000) -> 0
open(/def.txt) -> 0
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/foo/abc.txt, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 32) 
node_2{ptrs: [7, 0], indir:0 size: 0}
+ alloc_page() -> 7
+ dirent_10 = 'abc.txt'
mknod(/foo/abc.txt, 100664) -> 0
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/foo/abc.txt)
access(/foo/abc.txt, 0000) -> 0
open(/foo/abc.txt) -> 0
+ storage_read(/def.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 11}
read(/def.txt, 4096 bytes, @+0) -> 11
+ alloc_inode() -> 11
+ copy( 10{size=0) ) ...
node_10{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 10{size=0} ) -> 11{size=0}
+ writing to page: 10
+ grow_inode( ... , 11) 
node_11{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 13
+ alloc_inode() -> 12
+ copy( 2{size=32) ) ...
node_2{ptrs: [7, 0], indir:0 size: 32}
+ alloc_page() -> 14
+ end of copy_inode( 2{size=32} ) -> 12{size=32}
	[DEBUG] old inum: 10; new inum: 11
+ alloc_inode() -> 13
+ copy( 9{size=96) ) ...
node_9{ptrs: [12, 0], indir:0 size: 96}
+ alloc_page() -> 15
+ end of copy_inode( 9{size=96} ) -> 13{size=96}
	[DEBUG] old inum: 2; new inum: 12
	[DEBUG] adding root (/): 13
+ add_root(13, write /foo/abc.txt) -> ...
... new version: -> 5 
write(/foo/abc.txt, 11 bytes, @+0) -> 11
+ storage_stat(/def.txt)
getattr(/def.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 96}
+ storage_stat(/foo/abc.txt)
access(/foo/abc.txt, 0000) -> 0
open(/foo/abc.txt) -> 0
ioctl(/foo/abc.txt, 21505, ...) -> -1
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (0) {mode: 100664, size: 11}
+ storage_read(/foo/abc.txt); inode 11
node_11{ptrs: [13, 0], indir:0 size: 11}
read(/foo/abc.txt, 4096 bytes, @+0) -> 11
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/40k.txt)
getattr(/40k.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/40k.txt, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 128) 
node_13{ptrs: [15, 0], indir:0 size: 96}
+ dirent_14 = '40k.txt'
mknod(/40k.txt, 100664) -> 0
+ storage_stat(/40k.txt)
getattr(/40k.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/40k.txt)
access(/40k.txt, 0000) -> 0
open(/40k.txt) -> 0
ioctl(/40k.txt, 21505, ...) -> -1
+ alloc_inode() -> 15
+ copy( 14{size=0) ) ...
node_14{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 14{size=0} ) -> 15{size=0}
+ writing to page: 14
+ grow_inode( ... , 4096) 
node_15{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 16
+ alloc_inode() -> 16
+ copy( 13{size=128) ) ...
node_13{ptrs: [15, 0], indir:0 size: 128}
+ alloc_page() -> 17
+ end of copy_inode( 13{size=128} ) -> 16{size=128}
	[DEBUG] old inum: 14; new inum: 15
	[DEBUG] adding root (/): 16
+ add_root(16, write /40k.txt) -> ...
... new version: -> 6 
write(/40k.txt, 4096 bytes, @+0) -> 4096
+ alloc_inode() -> 17
+ copy( 15{size=4096) ) ...
node_15{ptrs: [16, 0], indir:0 size: 4096}
+ alloc_page() -> 18
+ end of copy_inode( 15{size=4096} ) -> 17{size=4096}
+ writing to page: 15
+ grow_inode( ... , 8192) 
node_17{ptrs: [18, 0], indir:0 size: 4096}
+ alloc_page() -> 19
+ alloc_inode() -> 18
+ copy( 16{size=128) ) ...
node_16{ptrs: [17, 0], indir:0 size: 128}
+ alloc_page() -> 20
+ end of copy_inode( 16{size=128} ) -> 18{size=128}
	[DEBUG] old inum: 15; new inum: 17
	[DEBUG] adding root (/): 18
+ add_root(18, write /40k.txt) -> ...
... new version: -> 7 
write(/40k.txt, 4096 bytes, @+4096) -> 4096
+ alloc_inode() -> 19
+ copy( 17{size=8192) ) ...
node_17{ptrs: [18, 19], indir:0 size: 8192}
+ alloc_page() -> 21
+ alloc_page() -> 22
+ end of copy_inode( 17{size=8192} ) -> 19{size=8192}
+ writing to page: 17
+ grow_inode( ... , 12288) 
node_19{ptrs: [21, 22], indir:0 size: 8192}
+ alloc_page() -> 23
+ alloc_page() -> 24
+ alloc_inode() -> 20
+ copy( 18{size=128) ) ...
node_18{ptrs: [20, 0], indir:0 size: 128}
+ alloc_page() -> 25
+ end of copy_inode( 18{size=128} ) -> 20{size=128}
	[DEBUG] old inum: 17; new inum: 19
	[DEBUG] adding root (/): 20
+ add_root(20, write /40k.txt) -> ...
... new version: -> 8 
write(/40k.txt, 4096 bytes, @+8192) -> 4096
+ alloc_inode() -> 21
+ copy( 19{size=12288) ) ...
node_19{ptrs: [21, 22], indir:23 size: 12288}
+ alloc_page() -> 26
+ alloc_page() -> 27
+ alloc_page() -> 28
+ alloc_page() -> 29
+ end of copy_inode( 19{size=12288} ) -> 21{size=12288}
+ writing to page: 19
+ grow_inode( ... , 16384) 
node_21{ptrs: [26, 27], indir:28 size: 12288}
+ alloc_page() -> 30
+ alloc_inode() -> 22
+ copy( 20{size=128) ) ...
node_20{ptrs: [25, 0], indir:0 size: 128}
+ alloc_page() -> 31
+ end of copy_inode( 20{size=128} ) -> 22{size=128}
	[DEBUG] old inum: 19; new inum: 21
	[DEBUG] adding root (/): 22
+ add_root(22, write /40k.txt) -> ...
+ free_inode(4)...
+ shrink_inode( ... , 0) 
node_4{ptrs: [0, 0], indir:0 size: 0}
node_4{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 0], indir:0 size: 64}
pnum(3[0]): 8


+ free_page(8)




node_3{ptrs: [8, 0], indir:0 size: 0}
+ traverse_and_free ({write /one.txt r=3}, {write /two.txt}) -> 0
... new version: -> 9 
write(/40k.txt, 4096 bytes, @+12288) -> 4096
+ alloc_inode() -> 3
+ copy( 21{size=16384) ) ...
node_21{ptrs: [26, 27], indir:28 size: 16384}
+ alloc_page() -> 8
+ alloc_page() -> 32
+ alloc_page() -> 33
+ alloc_page() -> 34
+ alloc_page() -> 35
+ end of copy_inode( 21{size=16384} ) -> 3{size=16384}
+ writing to page: 21
+ grow_inode( ... , 20480) 
node_3{ptrs: [8, 32], indir:33 size: 16384}
+ alloc_page() -> 36
+ alloc_inode() -> 4
+ copy( 22{size=128) ) ...
node_22{ptrs: [31, 0], indir:0 size: 128}
+ alloc_page() -> 37
+ end of copy_inode( 22{size=128} ) -> 4{size=128}
	[DEBUG] old inum: 21; new inum: 3
	[DEBUG] adding root (/): 4
+ add_root(4, write /40k.txt) -> ...
+ free_inode(7)...
+ shrink_inode( ... , 0) 
node_7{ptrs: [0, 0], indir:0 size: 0}
node_7{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 0], indir:0 size: 96}
pnum(6[0]): 10


+ free_page(10)




node_6{ptrs: [10, 0], indir:0 size: 0}
+ traverse_and_free ({write /two.txt r=6}, {write /2k.txt}) -> 0
... new version: -> 10 
write(/40k.txt, 4096 bytes, @+16384) -> 4096
+ alloc_inode() -> 6
+ copy( 3{size=20480) ) ...
node_3{ptrs: [8, 32], indir:33 size: 20480}
+ alloc_page() -> 10
+ alloc_page() -> 38
+ alloc_page() -> 39
+ alloc_page() -> 40
+ alloc_page() -> 41
+ alloc_page() -> 42
+ end of copy_inode( 3{size=20480} ) -> 6{size=20480}
+ writing to page: 3
+ grow_inode( ... , 24576) 
node_6{ptrs: [10, 38], indir:39 size: 20480}
+ alloc_page() -> 43
+ alloc_inode() -> 7
+ copy( 4{size=128) ) ...
node_4{ptrs: [37, 0], indir:0 size: 128}
+ alloc_page() -> 44
+ end of copy_inode( 4{size=128} ) -> 7{size=128}
	[DEBUG] old inum: 3; new inum: 6
	[DEBUG] adding root (/): 7
+ add_root(7, write /40k.txt) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [0, 0], indir:0 size: 0}
node_10{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 0], indir:0 size: 32}
pnum(2[0]): 7


+ free_page(7)




node_2{ptrs: [7, 0], indir:0 size: 0}
+ free_inode(9)...
+ shrink_inode( ... , 0) 
node_9{ptrs: [12, 0], indir:0 size: 96}
pnum(9[0]): 12


+ free_page(12)




node_9{ptrs: [12, 0], indir:0 size: 0}
+ traverse_and_free ({write /2k.txt r=9}, {write /foo/abc.txt}) -> 0
... new version: -> 11 
write(/40k.txt, 4096 bytes, @+20480) -> 4096
+ alloc_inode() -> 2
+ copy( 6{size=24576) ) ...
node_6{ptrs: [10, 38], indir:39 size: 24576}
+ alloc_page() -> 7
+ alloc_page() -> 12
+ alloc_page() -> 45
+ alloc_page() -> 46
+ alloc_page() -> 47
+ alloc_page() -> 48
+ alloc_page() -> 49
+ end of copy_inode( 6{size=24576} ) -> 2{size=24576}
+ writing to page: 6
+ grow_inode( ... , 28672) 
node_2{ptrs: [7, 12], indir:45 size: 24576}
+ alloc_page() -> 50
+ alloc_inode() -> 9
+ copy( 7{size=128) ) ...
node_7{ptrs: [44, 0], indir:0 size: 128}
+ alloc_page() -> 51
+ end of copy_inode( 7{size=128} ) -> 9{size=128}
	[DEBUG] old inum: 6; new inum: 2
	[DEBUG] adding root (/): 9
+ add_root(9, write /40k.txt) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [0, 0], indir:0 size: 0}
node_14{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(13)...
+ shrink_inode( ... , 0) 
node_13{ptrs: [15, 0], indir:0 size: 128}
pnum(13[0]): 15


+ free_page(15)




node_13{ptrs: [15, 0], indir:0 size: 0}
+ traverse_and_free ({write /foo/abc.txt r=13}, {write /40k.txt}) -> 0
... new version: -> 12 
write(/40k.txt, 4096 bytes, @+24576) -> 4096
+ alloc_inode() -> 10
+ copy( 2{size=28672) ) ...
node_2{ptrs: [7, 12], indir:45 size: 28672}
+ alloc_page() -> 15
+ alloc_page() -> 52
+ alloc_page() -> 53
+ alloc_page() -> 54
+ alloc_page() -> 55
+ alloc_page() -> 56
+ alloc_page() -> 57
+ alloc_page() -> 58
+ end of copy_inode( 2{size=28672} ) -> 10{size=28672}
+ writing to page: 2
+ grow_inode( ... , 32768) 
node_10{ptrs: [15, 52], indir:53 size: 28672}
+ alloc_page() -> 59
+ alloc_inode() -> 13
+ copy( 9{size=128) ) ...
node_9{ptrs: [51, 0], indir:0 size: 128}
+ alloc_page() -> 60
+ end of copy_inode( 9{size=128} ) -> 13{size=128}
	[DEBUG] old inum: 2; new inum: 10
	[DEBUG] adding root (/): 13
+ add_root(13, write /40k.txt) -> ...
+ free_inode(15)...
+ shrink_inode( ... , 0) 
node_15{ptrs: [16, 0], indir:0 size: 4096}
pnum(15[0]): 16


+ free_page(16)




node_15{ptrs: [16, 0], indir:0 size: 0}
+ free_inode(16)...
+ shrink_inode( ... , 0) 
node_16{ptrs: [17, 0], indir:0 size: 128}
pnum(16[0]): 17


+ free_page(17)




node_16{ptrs: [17, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=16}, {write /40k.txt}) -> 0
... new version: -> 13 
write(/40k.txt, 4096 bytes, @+28672) -> 4096
+ alloc_inode() -> 14
+ copy( 10{size=32768) ) ...
node_10{ptrs: [15, 52], indir:53 size: 32768}
+ alloc_page() -> 16
+ alloc_page() -> 17
+ alloc_page() -> 61
+ alloc_page() -> 62
+ alloc_page() -> 63
+ alloc_page() -> 64
+ alloc_page() -> 65
+ alloc_page() -> 66
+ alloc_page() -> 67
+ end of copy_inode( 10{size=32768} ) -> 14{size=32768}
+ writing to page: 10
+ grow_inode( ... , 36864) 
node_14{ptrs: [16, 17], indir:61 size: 32768}
+ alloc_page() -> 68
+ alloc_inode() -> 15
+ copy( 13{size=128) ) ...
node_13{ptrs: [60, 0], indir:0 size: 128}
+ alloc_page() -> 69
+ end of copy_inode( 13{size=128} ) -> 15{size=128}
	[DEBUG] old inum: 10; new inum: 14
	[DEBUG] adding root (/): 15
+ add_root(15, write /40k.txt) -> ...
+ free_inode(17)...
+ shrink_inode( ... , 0) 
node_17{ptrs: [18, 19], indir:0 size: 8192}
pnum(17[1]): 19


+ free_page(19)




pnum(17[0]): 18


+ free_page(18)




node_17{ptrs: [18, 19], indir:0 size: 0}
+ free_inode(18)...
+ shrink_inode( ... , 0) 
node_18{ptrs: [20, 0], indir:0 size: 128}
pnum(18[0]): 20


+ free_page(20)




node_18{ptrs: [20, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=18}, {write /40k.txt}) -> 0
... new version: -> 14 
write(/40k.txt, 4096 bytes, @+32768) -> 4096
+ alloc_inode() -> 16
+ copy( 14{size=36864) ) ...
node_14{ptrs: [16, 17], indir:61 size: 36864}
+ alloc_page() -> 18
+ alloc_page() -> 19
+ alloc_page() -> 20
+ alloc_page() -> 70
+ alloc_page() -> 71
+ alloc_page() -> 72
+ alloc_page() -> 73
+ alloc_page() -> 74
+ alloc_page() -> 75
+ alloc_page() -> 76
+ end of copy_inode( 14{size=36864} ) -> 16{size=36864}
+ writing to page: 14
+ grow_inode( ... , 40001) 
node_16{ptrs: [18, 19], indir:20 size: 36864}
+ alloc_page() -> 77
+ alloc_inode() -> 17
+ copy( 15{size=128) ) ...
node_15{ptrs: [69, 0], indir:0 size: 128}
+ alloc_page() -> 78
+ end of copy_inode( 15{size=128} ) -> 17{size=128}
	[DEBUG] old inum: 14; new inum: 16
	[DEBUG] adding root (/): 17
+ add_root(17, write /40k.txt) -> ...
+ free_inode(19)...
+ shrink_inode( ... , 0) 
node_19{ptrs: [21, 22], indir:23 size: 12288}
pnum(19[2]): 24


+ free_page(24)




pnum(19[1]): 22


+ free_page(22)




pnum(19[0]): 21


+ free_page(21)




node_19{ptrs: [21, 22], indir:23 size: 0}
+ free_inode(20)...
+ shrink_inode( ... , 0) 
node_20{ptrs: [25, 0], indir:0 size: 128}
pnum(20[0]): 25


+ free_page(25)




node_20{ptrs: [25, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=20}, {write /40k.txt}) -> 0
... new version: -> 15 
write(/40k.txt, 3137 bytes, @+36864) -> 3137
+ storage_stat(/40k.txt)
access(/40k.txt, 0000) -> 0
open(/40k.txt) -> 0
ioctl(/40k.txt, 21505, ...) -> -1
+ storage_stat(/40k.txt)
getattr(/40k.txt) -> (0) {mode: 100664, size: 40001}
+ storage_read(/40k.txt); inode 16
node_16{ptrs: [18, 19], indir:20 size: 40001}
read(/40k.txt, 16384 bytes, @+0) -> 16384
+ storage_read(/40k.txt); inode 16
node_16{ptrs: [18, 19], indir:20 size: 40001}
read(/40k.txt, 24576 bytes, @+16384) -> 23617
+ storage_stat(/40k.txt)
getattr(/40k.txt) -> (0) {mode: 100664, size: 40001}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/40k.txt)
access(/40k.txt, 0000) -> 0
open(/40k.txt) -> 0
ioctl(/40k.txt, 21505, ...) -> -1
+ storage_read(/40k.txt); inode 16
node_16{ptrs: [18, 19], indir:20 size: 40001}
read(/40k.txt, 12288 bytes, @+4096) -> 12288
+ storage_stat(/)
access(/, 0001) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (-2) {mode: 0000, size: 0}
+ mknod (/dir1, 16893)
+ alloc_inode() -> 18
+ grow_inode( ... , 160) 
node_17{ptrs: [78, 19], indir:0 size: 128}
+ dirent_18 = 'dir1'
mknod(/dir1, 40775) -> 0
mkdir(/dir1) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 0}
+ storage_stat(/dir1)
access(/dir1, 0001) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (-2) {mode: 0000, size: 0}
+ mknod (/dir1/dir2, 16893)
+ alloc_inode() -> 19
+ grow_inode( ... , 32) 
node_18{ptrs: [20, 0], indir:0 size: 0}
+ alloc_page() -> 21
+ dirent_19 = 'dir2'
mknod(/dir1/dir2, 40775) -> 0
mkdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 0}
+ storage_stat(/dir1/dir2)
access(/dir1/dir2, 0001) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (-2) {mode: 0000, size: 0}
+ mknod (/dir1/dir2/dir3, 16893)
+ alloc_inode() -> 20
+ grow_inode( ... , 32) 
node_19{ptrs: [21, 22], indir:23 size: 0}
+ alloc_page() -> 22
+ dirent_20 = 'dir3'
mknod(/dir1/dir2/dir3, 40775) -> 0
mkdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 0}
+ storage_stat(/dir1/dir2/dir3)
access(/dir1/dir2/dir3, 0001) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (-2) {mode: 0000, size: 0}
+ mknod (/dir1/dir2/dir3/dir4, 16893)
+ alloc_inode() -> 23
+ grow_inode( ... , 32) 
node_20{ptrs: [25, 0], indir:0 size: 0}
+ alloc_page() -> 24
+ dirent_23 = 'dir4'
mknod(/dir1/dir2/dir3/dir4, 40775) -> 0
mkdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 0}
+ storage_stat(/dir1/dir2/dir3/dir4)
access(/dir1/dir2/dir3/dir4, 0001) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (-2) {mode: 0000, size: 0}
+ mknod (/dir1/dir2/dir3/dir4/dir5, 16893)
+ alloc_inode() -> 24
+ grow_inode( ... , 32) 
node_23{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 25
+ dirent_24 = 'dir5'
mknod(/dir1/dir2/dir3/dir4/dir5, 40775) -> 0
mkdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 0}
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
getattr(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/dir1/dir2/dir3/dir4/dir5/hello.txt, 33204)
+ alloc_inode() -> 25
+ grow_inode( ... , 32) 
node_24{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 79
+ dirent_25 = 'hello.txt'
mknod(/dir1/dir2/dir3/dir4/dir5/hello.txt, 100664) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
getattr(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
access(/dir1/dir2/dir3/dir4/dir5/hello.txt, 0000) -> 0
open(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> 0
ioctl(/dir1/dir2/dir3/dir4/dir5/hello.txt, 21505, ...) -> -1
+ alloc_inode() -> 26
+ copy( 25{size=0) ) ...
node_25{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 25{size=0} ) -> 26{size=0}
+ writing to page: 25
+ grow_inode( ... , 12) 
node_26{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 80
+ alloc_inode() -> 27
+ copy( 24{size=32) ) ...
node_24{ptrs: [79, 0], indir:0 size: 32}
+ alloc_page() -> 81
+ end of copy_inode( 24{size=32} ) -> 27{size=32}
	[DEBUG] old inum: 25; new inum: 26
+ alloc_inode() -> 28
+ copy( 23{size=32) ) ...
node_23{ptrs: [25, 0], indir:0 size: 32}
+ alloc_page() -> 82
+ end of copy_inode( 23{size=32} ) -> 28{size=32}
	[DEBUG] old inum: 24; new inum: 27
+ alloc_inode() -> 29
+ copy( 20{size=32) ) ...
node_20{ptrs: [24, 0], indir:0 size: 32}
+ alloc_page() -> 83
+ end of copy_inode( 20{size=32} ) -> 29{size=32}
	[DEBUG] old inum: 23; new inum: 28
+ alloc_inode() -> 30
+ copy( 19{size=32) ) ...
node_19{ptrs: [22, 22], indir:23 size: 32}
+ alloc_page() -> 84
+ end of copy_inode( 19{size=32} ) -> 30{size=32}
	[DEBUG] old inum: 20; new inum: 29
+ alloc_inode() -> 31
+ copy( 18{size=32) ) ...
node_18{ptrs: [21, 0], indir:0 size: 32}
+ alloc_page() -> 85
+ end of copy_inode( 18{size=32} ) -> 31{size=32}
	[DEBUG] old inum: 19; new inum: 30
+ alloc_inode() -> 32
+ copy( 17{size=160) ) ...
node_17{ptrs: [78, 19], indir:0 size: 160}
+ alloc_page() -> 86
+ end of copy_inode( 17{size=160} ) -> 32{size=160}
	[DEBUG] old inum: 18; new inum: 31
	[DEBUG] adding root (/): 32
+ add_root(32, write /dir1/dir2/dir3/d) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 16384}
pnum(21[3]): 30


+ free_page(30)




pnum(21[2]): 29


+ free_page(29)




pnum(21[1]): 27


+ free_page(27)




pnum(21[0]): 26


+ free_page(26)




node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(22)...
+ shrink_inode( ... , 0) 
node_22{ptrs: [31, 0], indir:0 size: 128}
pnum(22[0]): 31


+ free_page(31)




node_22{ptrs: [31, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=22}, {write /40k.txt}) -> 0
... new version: -> 16 
write(/dir1/dir2/dir3/dir4/dir5/hello.txt, 12 bytes, @+0) -> 12
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
access(/dir1/dir2/dir3/dir4/dir5/hello.txt, 0000) -> 0
open(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> 0
ioctl(/dir1/dir2/dir3/dir4/dir5/hello.txt, 21505, ...) -> -1
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
getattr(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> (0) {mode: 100664, size: 12}
+ storage_read(/dir1/dir2/dir3/dir4/dir5/hello.txt); inode 26
node_26{ptrs: [80, 0], indir:0 size: 12}
read(/dir1/dir2/dir3/dir4/dir5/hello.txt, 4096 bytes, @+0) -> 12
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
getattr(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> (0) {mode: 100664, size: 12}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/numbers)
getattr(/numbers) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers, 16893)
+ alloc_inode() -> 21
+ grow_inode( ... , 192) 
node_32{ptrs: [86, 0], indir:0 size: 160}
+ dirent_21 = 'numbers'
mknod(/numbers, 40775) -> 0
mkdir(/numbers) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 0}
+ storage_stat(/numbers/1.num)
getattr(/numbers/1.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/1.num, 33204)
+ alloc_inode() -> 22
+ grow_inode( ... , 32) 
node_21{ptrs: [26, 27], indir:28 size: 0}
+ alloc_page() -> 26
+ dirent_22 = '1.num'
mknod(/numbers/1.num, 100664) -> 0
+ storage_stat(/numbers/1.num)
getattr(/numbers/1.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/1.num)
access(/numbers/1.num, 0000) -> 0
open(/numbers/1.num) -> 0
ioctl(/numbers/1.num, 21505, ...) -> -1
+ alloc_inode() -> 33
+ copy( 22{size=0) ) ...
node_22{ptrs: [31, 0], indir:0 size: 0}
+ end of copy_inode( 22{size=0} ) -> 33{size=0}
+ writing to page: 22
+ grow_inode( ... , 2) 
node_33{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 27
+ alloc_inode() -> 34
+ copy( 21{size=32) ) ...
node_21{ptrs: [26, 27], indir:28 size: 32}
+ alloc_page() -> 29
+ end of copy_inode( 21{size=32} ) -> 34{size=32}
	[DEBUG] old inum: 22; new inum: 33
+ alloc_inode() -> 35
+ copy( 32{size=192) ) ...
node_32{ptrs: [86, 0], indir:0 size: 192}
+ alloc_page() -> 30
+ end of copy_inode( 32{size=192} ) -> 35{size=192}
	[DEBUG] old inum: 21; new inum: 34
	[DEBUG] adding root (/): 35
+ add_root(35, write /numbers/1.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 20480}
pnum(3[4]): 36


+ free_page(36)




pnum(3[3]): 35


+ free_page(35)




pnum(3[2]): 34


+ free_page(34)




pnum(3[1]): 32


+ free_page(32)




pnum(3[0]): 8


+ free_page(8)




node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(4)...
+ shrink_inode( ... , 0) 
node_4{ptrs: [37, 0], indir:0 size: 128}
pnum(4[0]): 37


+ free_page(37)




node_4{ptrs: [37, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=4}, {write /40k.txt}) -> 0
... new version: -> 17 
write(/numbers/1.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/2.num)
getattr(/numbers/2.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/2.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 64) 
node_34{ptrs: [29, 0], indir:0 size: 32}
+ dirent_3 = '2.num'
mknod(/numbers/2.num, 100664) -> 0
+ storage_stat(/numbers/2.num)
getattr(/numbers/2.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/2.num)
access(/numbers/2.num, 0000) -> 0
open(/numbers/2.num) -> 0
ioctl(/numbers/2.num, 21505, ...) -> -1
+ alloc_inode() -> 4
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 4{size=0}
+ writing to page: 3
+ grow_inode( ... , 2) 
node_4{ptrs: [37, 0], indir:0 size: 0}
+ alloc_page() -> 8
+ alloc_inode() -> 36
+ copy( 34{size=64) ) ...
node_34{ptrs: [29, 0], indir:0 size: 64}
+ alloc_page() -> 31
+ end of copy_inode( 34{size=64} ) -> 36{size=64}
	[DEBUG] old inum: 3; new inum: 4
+ alloc_inode() -> 37
+ copy( 35{size=192) ) ...
node_35{ptrs: [30, 0], indir:0 size: 192}
+ alloc_page() -> 32
+ end of copy_inode( 35{size=192} ) -> 37{size=192}
	[DEBUG] old inum: 34; new inum: 36
	[DEBUG] adding root (/): 37
+ add_root(37, write /numbers/2.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 24576}
pnum(6[5]): 43


+ free_page(43)




pnum(6[4]): 42


+ free_page(42)




pnum(6[3]): 41


+ free_page(41)




pnum(6[2]): 40


+ free_page(40)




pnum(6[1]): 38


+ free_page(38)




pnum(6[0]): 10


+ free_page(10)




node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(7)...
+ shrink_inode( ... , 0) 
node_7{ptrs: [44, 0], indir:0 size: 128}
pnum(7[0]): 44


+ free_page(44)




node_7{ptrs: [44, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=7}, {write /40k.txt}) -> 0
... new version: -> 18 
write(/numbers/2.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/3.num)
getattr(/numbers/3.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/3.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 96) 
node_36{ptrs: [31, 0], indir:0 size: 64}
+ dirent_6 = '3.num'
mknod(/numbers/3.num, 100664) -> 0
+ storage_stat(/numbers/3.num)
getattr(/numbers/3.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/3.num)
access(/numbers/3.num, 0000) -> 0
open(/numbers/3.num) -> 0
ioctl(/numbers/3.num, 21505, ...) -> -1
+ alloc_inode() -> 7
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 7{size=0}
+ writing to page: 6
+ grow_inode( ... , 2) 
node_7{ptrs: [44, 0], indir:0 size: 0}
+ alloc_page() -> 10
+ alloc_inode() -> 38
+ copy( 36{size=96) ) ...
node_36{ptrs: [31, 0], indir:0 size: 96}
+ alloc_page() -> 34
+ end of copy_inode( 36{size=96} ) -> 38{size=96}
	[DEBUG] old inum: 6; new inum: 7
+ alloc_inode() -> 39
+ copy( 37{size=192) ) ...
node_37{ptrs: [32, 0], indir:0 size: 192}
+ alloc_page() -> 35
+ end of copy_inode( 37{size=192} ) -> 39{size=192}
	[DEBUG] old inum: 36; new inum: 38
	[DEBUG] adding root (/): 39
+ add_root(39, write /numbers/3.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 28672}
pnum(2[6]): 50


+ free_page(50)




pnum(2[5]): 49


+ free_page(49)




pnum(2[4]): 48


+ free_page(48)




pnum(2[3]): 47


+ free_page(47)




pnum(2[2]): 46


+ free_page(46)




pnum(2[1]): 12


+ free_page(12)




pnum(2[0]): 7


+ free_page(7)




node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(9)...
+ shrink_inode( ... , 0) 
node_9{ptrs: [51, 0], indir:0 size: 128}
pnum(9[0]): 51


+ free_page(51)




node_9{ptrs: [51, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=9}, {write /40k.txt}) -> 0
... new version: -> 19 
write(/numbers/3.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/4.num)
getattr(/numbers/4.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/4.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 128) 
node_38{ptrs: [34, 0], indir:0 size: 96}
+ dirent_2 = '4.num'
mknod(/numbers/4.num, 100664) -> 0
+ storage_stat(/numbers/4.num)
getattr(/numbers/4.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/4.num)
access(/numbers/4.num, 0000) -> 0
open(/numbers/4.num) -> 0
ioctl(/numbers/4.num, 21505, ...) -> -1
+ alloc_inode() -> 9
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 9{size=0}
+ writing to page: 2
+ grow_inode( ... , 2) 
node_9{ptrs: [51, 0], indir:0 size: 0}
+ alloc_page() -> 7
+ alloc_inode() -> 40
+ copy( 38{size=128) ) ...
node_38{ptrs: [34, 0], indir:0 size: 128}
+ alloc_page() -> 12
+ end of copy_inode( 38{size=128} ) -> 40{size=128}
	[DEBUG] old inum: 2; new inum: 9
+ alloc_inode() -> 41
+ copy( 39{size=192) ) ...
node_39{ptrs: [35, 0], indir:0 size: 192}
+ alloc_page() -> 36
+ end of copy_inode( 39{size=192} ) -> 41{size=192}
	[DEBUG] old inum: 38; new inum: 40
	[DEBUG] adding root (/): 41
+ add_root(41, write /numbers/4.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 32768}
pnum(10[7]): 59


+ free_page(59)




pnum(10[6]): 58


+ free_page(58)




pnum(10[5]): 57


+ free_page(57)




pnum(10[4]): 56


+ free_page(56)




pnum(10[3]): 55


+ free_page(55)




pnum(10[2]): 54


+ free_page(54)




pnum(10[1]): 52


+ free_page(52)




pnum(10[0]): 15


+ free_page(15)




node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(13)...
+ shrink_inode( ... , 0) 
node_13{ptrs: [60, 0], indir:0 size: 128}
pnum(13[0]): 60


+ free_page(60)




node_13{ptrs: [60, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=13}, {write /40k.txt}) -> 0
... new version: -> 20 
write(/numbers/4.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/5.num)
getattr(/numbers/5.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/5.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 160) 
node_40{ptrs: [12, 0], indir:0 size: 128}
+ dirent_10 = '5.num'
mknod(/numbers/5.num, 100664) -> 0
+ storage_stat(/numbers/5.num)
getattr(/numbers/5.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/5.num)
access(/numbers/5.num, 0000) -> 0
open(/numbers/5.num) -> 0
ioctl(/numbers/5.num, 21505, ...) -> -1
+ alloc_inode() -> 13
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 13{size=0}
+ writing to page: 10
+ grow_inode( ... , 2) 
node_13{ptrs: [60, 0], indir:0 size: 0}
+ alloc_page() -> 15
+ alloc_inode() -> 42
+ copy( 40{size=160) ) ...
node_40{ptrs: [12, 0], indir:0 size: 160}
+ alloc_page() -> 37
+ end of copy_inode( 40{size=160} ) -> 42{size=160}
	[DEBUG] old inum: 10; new inum: 13
+ alloc_inode() -> 43
+ copy( 41{size=192) ) ...
node_41{ptrs: [36, 0], indir:0 size: 192}
+ alloc_page() -> 38
+ end of copy_inode( 41{size=192} ) -> 43{size=192}
	[DEBUG] old inum: 40; new inum: 42
	[DEBUG] adding root (/): 43
+ add_root(43, write /numbers/5.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 36864}
pnum(14[8]): 68


+ free_page(68)




pnum(14[7]): 67


+ free_page(67)




pnum(14[6]): 66


+ free_page(66)




pnum(14[5]): 65


+ free_page(65)




pnum(14[4]): 64


+ free_page(64)




pnum(14[3]): 63


+ free_page(63)




pnum(14[2]): 62


+ free_page(62)




pnum(14[1]): 17


+ free_page(17)




pnum(14[0]): 16


+ free_page(16)




node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(15)...
+ shrink_inode( ... , 0) 
node_15{ptrs: [69, 0], indir:0 size: 128}
pnum(15[0]): 69


+ free_page(69)




node_15{ptrs: [69, 0], indir:0 size: 0}
+ traverse_and_free ({write /40k.txt r=15}, {write /40k.txt}) -> 0
... new version: -> 21 
write(/numbers/5.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/6.num)
getattr(/numbers/6.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/6.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 192) 
node_42{ptrs: [37, 0], indir:0 size: 160}
+ dirent_14 = '6.num'
mknod(/numbers/6.num, 100664) -> 0
+ storage_stat(/numbers/6.num)
getattr(/numbers/6.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/6.num)
access(/numbers/6.num, 0000) -> 0
open(/numbers/6.num) -> 0
ioctl(/numbers/6.num, 21505, ...) -> -1
+ alloc_inode() -> 15
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 15{size=0}
+ writing to page: 14
+ grow_inode( ... , 2) 
node_15{ptrs: [69, 0], indir:0 size: 0}
+ alloc_page() -> 16
+ alloc_inode() -> 44
+ copy( 42{size=192) ) ...
node_42{ptrs: [37, 0], indir:0 size: 192}
+ alloc_page() -> 17
+ end of copy_inode( 42{size=192} ) -> 44{size=192}
	[DEBUG] old inum: 14; new inum: 15
+ alloc_inode() -> 45
+ copy( 43{size=192) ) ...
node_43{ptrs: [38, 0], indir:0 size: 192}
+ alloc_page() -> 40
+ end of copy_inode( 43{size=192} ) -> 45{size=192}
	[DEBUG] old inum: 42; new inum: 44
	[DEBUG] adding root (/): 45
+ add_root(45, write /numbers/6.num) -> ...
+ traverse_and_free ({write /40k.txt r=17}, {write /dir1/dir2/dir3/d}) -> -2
	[DEBUG] traverse and free failed! freeing: {15, 17} with {16, 32): -2... new version: -> 22 
write(/numbers/6.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/7.num)
getattr(/numbers/7.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/7.num, 33204)
+ alloc_inode() -> 46
+ grow_inode( ... , 224) 
node_44{ptrs: [17, 0], indir:0 size: 192}
+ dirent_46 = '7.num'
mknod(/numbers/7.num, 100664) -> 0
+ storage_stat(/numbers/7.num)
getattr(/numbers/7.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/7.num)
access(/numbers/7.num, 0000) -> 0
open(/numbers/7.num) -> 0
ioctl(/numbers/7.num, 21505, ...) -> -1
+ alloc_inode() -> 47
+ copy( 46{size=0) ) ...
node_46{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 46{size=0} ) -> 47{size=0}
+ writing to page: 46
+ grow_inode( ... , 2) 
node_47{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 41
+ alloc_inode() -> 48
+ copy( 44{size=224) ) ...
node_44{ptrs: [17, 0], indir:0 size: 224}
+ alloc_page() -> 42
+ end of copy_inode( 44{size=224} ) -> 48{size=224}
	[DEBUG] old inum: 46; new inum: 47
+ alloc_inode() -> 49
+ copy( 45{size=192) ) ...
node_45{ptrs: [40, 0], indir:0 size: 192}
+ alloc_page() -> 43
+ end of copy_inode( 45{size=192} ) -> 49{size=192}
	[DEBUG] old inum: 44; new inum: 48
	[DEBUG] adding root (/): 49
+ add_root(49, write /numbers/7.num) -> ...
+ free_inode(22)...
+ shrink_inode( ... , 0) 
node_22{ptrs: [31, 0], indir:0 size: 0}
node_22{ptrs: [31, 0], indir:0 size: 0}
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 32}
pnum(21[0]): 26


+ free_page(26)




node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(32)...
+ shrink_inode( ... , 0) 
node_32{ptrs: [86, 0], indir:0 size: 192}
pnum(32[0]): 86


+ free_page(86)




node_32{ptrs: [86, 0], indir:0 size: 0}
+ traverse_and_free ({write /dir1/dir2/dir3/d r=32}, {write /numbers/1.num}) -> 0
... new version: -> 23 
write(/numbers/7.num, 2 bytes, @+0) -> 2
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/numbers/8.num)
getattr(/numbers/8.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/8.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 256) 
node_48{ptrs: [42, 0], indir:0 size: 224}
+ dirent_21 = '8.num'
mknod(/numbers/8.num, 100664) -> 0
+ storage_stat(/numbers/8.num)
getattr(/numbers/8.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/8.num)
access(/numbers/8.num, 0000) -> 0
open(/numbers/8.num) -> 0
ioctl(/numbers/8.num, 21505, ...) -> -1
+ alloc_inode() -> 22
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 22{size=0}
+ writing to page: 21
+ grow_inode( ... , 2) 
node_22{ptrs: [31, 0], indir:0 size: 0}
+ alloc_page() -> 26
+ alloc_inode() -> 32
+ copy( 48{size=256) ) ...
node_48{ptrs: [42, 0], indir:0 size: 256}
+ alloc_page() -> 44
+ end of copy_inode( 48{size=256} ) -> 32{size=256}
	[DEBUG] old inum: 21; new inum: 22
+ alloc_inode() -> 50
+ copy( 49{size=192) ) ...
node_49{ptrs: [43, 0], indir:0 size: 192}
+ alloc_page() -> 46
+ end of copy_inode( 49{size=192} ) -> 50{size=192}
	[DEBUG] old inum: 48; new inum: 32
	[DEBUG] adding root (/): 50
+ add_root(50, write /numbers/8.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(34)...
+ shrink_inode( ... , 0) 
node_34{ptrs: [29, 0], indir:0 size: 64}
pnum(34[0]): 29


+ free_page(29)




node_34{ptrs: [29, 0], indir:0 size: 0}
+ free_inode(35)...
+ shrink_inode( ... , 0) 
node_35{ptrs: [30, 0], indir:0 size: 192}
pnum(35[0]): 30


+ free_page(30)




node_35{ptrs: [30, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/1.num r=35}, {write /numbers/2.num}) -> 0
... new version: -> 24 
write(/numbers/8.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/9.num)
getattr(/numbers/9.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/9.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 288) 
node_32{ptrs: [44, 0], indir:0 size: 256}
+ dirent_3 = '9.num'
mknod(/numbers/9.num, 100664) -> 0
+ storage_stat(/numbers/9.num)
getattr(/numbers/9.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/9.num)
access(/numbers/9.num, 0000) -> 0
open(/numbers/9.num) -> 0
ioctl(/numbers/9.num, 21505, ...) -> -1
+ alloc_inode() -> 34
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 34{size=0}
+ writing to page: 3
+ grow_inode( ... , 2) 
node_34{ptrs: [29, 0], indir:0 size: 0}
+ alloc_page() -> 29
+ alloc_inode() -> 35
+ copy( 32{size=288) ) ...
node_32{ptrs: [44, 0], indir:0 size: 288}
+ alloc_page() -> 30
+ end of copy_inode( 32{size=288} ) -> 35{size=288}
	[DEBUG] old inum: 3; new inum: 34
+ alloc_inode() -> 51
+ copy( 50{size=192) ) ...
node_50{ptrs: [46, 0], indir:0 size: 192}
+ alloc_page() -> 47
+ end of copy_inode( 50{size=192} ) -> 51{size=192}
	[DEBUG] old inum: 32; new inum: 35
	[DEBUG] adding root (/): 51
+ add_root(51, write /numbers/9.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 0}
node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(36)...
+ shrink_inode( ... , 0) 
node_36{ptrs: [31, 0], indir:0 size: 96}
pnum(36[0]): 31


+ free_page(31)




node_36{ptrs: [31, 0], indir:0 size: 0}
+ free_inode(37)...
+ shrink_inode( ... , 0) 
node_37{ptrs: [32, 0], indir:0 size: 192}
pnum(37[0]): 32


+ free_page(32)




node_37{ptrs: [32, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/2.num r=37}, {write /numbers/3.num}) -> 0
... new version: -> 25 
write(/numbers/9.num, 2 bytes, @+0) -> 2
+ storage_stat(/numbers/10.num)
getattr(/numbers/10.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/10.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 320) 
node_35{ptrs: [30, 0], indir:0 size: 288}
+ dirent_6 = '10.num'
mknod(/numbers/10.num, 100664) -> 0
+ storage_stat(/numbers/10.num)
getattr(/numbers/10.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/10.num)
access(/numbers/10.num, 0000) -> 0
open(/numbers/10.num) -> 0
ioctl(/numbers/10.num, 21505, ...) -> -1
+ alloc_inode() -> 36
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 36{size=0}
+ writing to page: 6
+ grow_inode( ... , 3) 
node_36{ptrs: [31, 0], indir:0 size: 0}
+ alloc_page() -> 31
+ alloc_inode() -> 37
+ copy( 35{size=320) ) ...
node_35{ptrs: [30, 0], indir:0 size: 320}
+ alloc_page() -> 32
+ end of copy_inode( 35{size=320} ) -> 37{size=320}
	[DEBUG] old inum: 6; new inum: 36
+ alloc_inode() -> 52
+ copy( 51{size=192) ) ...
node_51{ptrs: [47, 0], indir:0 size: 192}
+ alloc_page() -> 48
+ end of copy_inode( 51{size=192} ) -> 52{size=192}
	[DEBUG] old inum: 35; new inum: 37
	[DEBUG] adding root (/): 52
+ add_root(52, write /numbers/10.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 0}
node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(38)...
+ shrink_inode( ... , 0) 
node_38{ptrs: [34, 0], indir:0 size: 128}
pnum(38[0]): 34


+ free_page(34)




node_38{ptrs: [34, 0], indir:0 size: 0}
+ free_inode(39)...
+ shrink_inode( ... , 0) 
node_39{ptrs: [35, 0], indir:0 size: 192}
pnum(39[0]): 35


+ free_page(35)




node_39{ptrs: [35, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/3.num r=39}, {write /numbers/4.num}) -> 0
... new version: -> 26 
write(/numbers/10.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/11.num)
getattr(/numbers/11.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/11.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 352) 
node_37{ptrs: [32, 0], indir:0 size: 320}
+ dirent_2 = '11.num'
mknod(/numbers/11.num, 100664) -> 0
+ storage_stat(/numbers/11.num)
getattr(/numbers/11.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/11.num)
access(/numbers/11.num, 0000) -> 0
open(/numbers/11.num) -> 0
ioctl(/numbers/11.num, 21505, ...) -> -1
+ alloc_inode() -> 38
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 38{size=0}
+ writing to page: 2
+ grow_inode( ... , 3) 
node_38{ptrs: [34, 0], indir:0 size: 0}
+ alloc_page() -> 34
+ alloc_inode() -> 39
+ copy( 37{size=352) ) ...
node_37{ptrs: [32, 0], indir:0 size: 352}
+ alloc_page() -> 35
+ end of copy_inode( 37{size=352} ) -> 39{size=352}
	[DEBUG] old inum: 2; new inum: 38
+ alloc_inode() -> 53
+ copy( 52{size=192) ) ...
node_52{ptrs: [48, 0], indir:0 size: 192}
+ alloc_page() -> 49
+ end of copy_inode( 52{size=192} ) -> 53{size=192}
	[DEBUG] old inum: 37; new inum: 39
	[DEBUG] adding root (/): 53
+ add_root(53, write /numbers/11.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 0}
node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(40)...
+ shrink_inode( ... , 0) 
node_40{ptrs: [12, 0], indir:0 size: 160}
pnum(40[0]): 12


+ free_page(12)




node_40{ptrs: [12, 0], indir:0 size: 0}
+ free_inode(41)...
+ shrink_inode( ... , 0) 
node_41{ptrs: [36, 0], indir:0 size: 192}
pnum(41[0]): 36


+ free_page(36)




node_41{ptrs: [36, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/4.num r=41}, {write /numbers/5.num}) -> 0
... new version: -> 27 
write(/numbers/11.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/12.num)
getattr(/numbers/12.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/12.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 384) 
node_39{ptrs: [35, 0], indir:0 size: 352}
+ dirent_10 = '12.num'
mknod(/numbers/12.num, 100664) -> 0
+ storage_stat(/numbers/12.num)
getattr(/numbers/12.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/12.num)
access(/numbers/12.num, 0000) -> 0
open(/numbers/12.num) -> 0
ioctl(/numbers/12.num, 21505, ...) -> -1
+ alloc_inode() -> 40
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 40{size=0}
+ writing to page: 10
+ grow_inode( ... , 3) 
node_40{ptrs: [12, 0], indir:0 size: 0}
+ alloc_page() -> 12
+ alloc_inode() -> 41
+ copy( 39{size=384) ) ...
node_39{ptrs: [35, 0], indir:0 size: 384}
+ alloc_page() -> 36
+ end of copy_inode( 39{size=384} ) -> 41{size=384}
	[DEBUG] old inum: 10; new inum: 40
+ alloc_inode() -> 54
+ copy( 53{size=192) ) ...
node_53{ptrs: [49, 0], indir:0 size: 192}
+ alloc_page() -> 50
+ end of copy_inode( 53{size=192} ) -> 54{size=192}
	[DEBUG] old inum: 39; new inum: 41
	[DEBUG] adding root (/): 54
+ add_root(54, write /numbers/12.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 0}
node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(42)...
+ shrink_inode( ... , 0) 
node_42{ptrs: [37, 0], indir:0 size: 192}
pnum(42[0]): 37


+ free_page(37)




node_42{ptrs: [37, 0], indir:0 size: 0}
+ free_inode(43)...
+ shrink_inode( ... , 0) 
node_43{ptrs: [38, 0], indir:0 size: 192}
pnum(43[0]): 38


+ free_page(38)




node_43{ptrs: [38, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/5.num r=43}, {write /numbers/6.num}) -> 0
... new version: -> 28 
write(/numbers/12.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/13.num)
getattr(/numbers/13.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/13.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 416) 
node_41{ptrs: [36, 0], indir:0 size: 384}
+ dirent_14 = '13.num'
mknod(/numbers/13.num, 100664) -> 0
+ storage_stat(/numbers/13.num)
getattr(/numbers/13.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/13.num)
access(/numbers/13.num, 0000) -> 0
open(/numbers/13.num) -> 0
ioctl(/numbers/13.num, 21505, ...) -> -1
+ alloc_inode() -> 42
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 42{size=0}
+ writing to page: 14
+ grow_inode( ... , 3) 
node_42{ptrs: [37, 0], indir:0 size: 0}
+ alloc_page() -> 37
+ alloc_inode() -> 43
+ copy( 41{size=416) ) ...
node_41{ptrs: [36, 0], indir:0 size: 416}
+ alloc_page() -> 38
+ end of copy_inode( 41{size=416} ) -> 43{size=416}
	[DEBUG] old inum: 14; new inum: 42
+ alloc_inode() -> 55
+ copy( 54{size=192) ) ...
node_54{ptrs: [50, 0], indir:0 size: 192}
+ alloc_page() -> 51
+ end of copy_inode( 54{size=192} ) -> 55{size=192}
	[DEBUG] old inum: 41; new inum: 43
	[DEBUG] adding root (/): 55
+ add_root(55, write /numbers/13.num) -> ...
+ free_inode(46)...
+ shrink_inode( ... , 0) 
node_46{ptrs: [0, 0], indir:0 size: 0}
node_46{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(44)...
+ shrink_inode( ... , 0) 
node_44{ptrs: [17, 0], indir:0 size: 224}
pnum(44[0]): 17


+ free_page(17)




node_44{ptrs: [17, 0], indir:0 size: 0}
+ free_inode(45)...
+ shrink_inode( ... , 0) 
node_45{ptrs: [40, 0], indir:0 size: 192}
pnum(45[0]): 40


+ free_page(40)




node_45{ptrs: [40, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/6.num r=45}, {write /numbers/7.num}) -> 0
... new version: -> 29 
write(/numbers/13.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/14.num)
getattr(/numbers/14.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/14.num, 33204)
+ alloc_inode() -> 44
+ grow_inode( ... , 448) 
node_43{ptrs: [38, 0], indir:0 size: 416}
+ dirent_44 = '14.num'
mknod(/numbers/14.num, 100664) -> 0
+ storage_stat(/numbers/14.num)
getattr(/numbers/14.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/14.num)
access(/numbers/14.num, 0000) -> 0
open(/numbers/14.num) -> 0
ioctl(/numbers/14.num, 21505, ...) -> -1
+ alloc_inode() -> 45
+ copy( 44{size=0) ) ...
node_44{ptrs: [17, 0], indir:0 size: 0}
+ end of copy_inode( 44{size=0} ) -> 45{size=0}
+ writing to page: 44
+ grow_inode( ... , 3) 
node_45{ptrs: [40, 0], indir:0 size: 0}
+ alloc_page() -> 17
+ alloc_inode() -> 46
+ copy( 43{size=448) ) ...
node_43{ptrs: [38, 0], indir:0 size: 448}
+ alloc_page() -> 40
+ end of copy_inode( 43{size=448} ) -> 46{size=448}
	[DEBUG] old inum: 44; new inum: 45
+ alloc_inode() -> 56
+ copy( 55{size=192) ) ...
node_55{ptrs: [51, 0], indir:0 size: 192}
+ alloc_page() -> 52
+ end of copy_inode( 55{size=192} ) -> 56{size=192}
	[DEBUG] old inum: 43; new inum: 46
	[DEBUG] adding root (/): 56
+ add_root(56, write /numbers/14.num) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 0}
node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(48)...
+ shrink_inode( ... , 0) 
node_48{ptrs: [42, 0], indir:0 size: 256}
pnum(48[0]): 42


+ free_page(42)




node_48{ptrs: [42, 0], indir:0 size: 0}
+ free_inode(49)...
+ shrink_inode( ... , 0) 
node_49{ptrs: [43, 0], indir:0 size: 192}
pnum(49[0]): 43


+ free_page(43)




node_49{ptrs: [43, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/7.num r=49}, {write /numbers/8.num}) -> 0
... new version: -> 30 
write(/numbers/14.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/15.num)
getattr(/numbers/15.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/15.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 480) 
node_46{ptrs: [40, 0], indir:0 size: 448}
+ dirent_21 = '15.num'
mknod(/numbers/15.num, 100664) -> 0
+ storage_stat(/numbers/15.num)
getattr(/numbers/15.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/15.num)
access(/numbers/15.num, 0000) -> 0
open(/numbers/15.num) -> 0
ioctl(/numbers/15.num, 21505, ...) -> -1
+ alloc_inode() -> 48
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 48{size=0}
+ writing to page: 21
+ grow_inode( ... , 3) 
node_48{ptrs: [42, 0], indir:0 size: 0}
+ alloc_page() -> 42
+ alloc_inode() -> 49
+ copy( 46{size=480) ) ...
node_46{ptrs: [40, 0], indir:0 size: 480}
+ alloc_page() -> 43
+ end of copy_inode( 46{size=480} ) -> 49{size=480}
	[DEBUG] old inum: 21; new inum: 48
+ alloc_inode() -> 57
+ copy( 56{size=192) ) ...
node_56{ptrs: [52, 0], indir:0 size: 192}
+ alloc_page() -> 54
+ end of copy_inode( 56{size=192} ) -> 57{size=192}
	[DEBUG] old inum: 46; new inum: 49
	[DEBUG] adding root (/): 57
+ add_root(57, write /numbers/15.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(32)...
+ shrink_inode( ... , 0) 
node_32{ptrs: [44, 0], indir:0 size: 288}
pnum(32[0]): 44


+ free_page(44)




node_32{ptrs: [44, 0], indir:0 size: 0}
+ free_inode(50)...
+ shrink_inode( ... , 0) 
node_50{ptrs: [46, 0], indir:0 size: 192}
pnum(50[0]): 46


+ free_page(46)




node_50{ptrs: [46, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/8.num r=50}, {write /numbers/9.num}) -> 0
... new version: -> 31 
write(/numbers/15.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/16.num)
getattr(/numbers/16.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/16.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 512) 
node_49{ptrs: [43, 0], indir:0 size: 480}
+ dirent_3 = '16.num'
mknod(/numbers/16.num, 100664) -> 0
+ storage_stat(/numbers/16.num)
getattr(/numbers/16.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/16.num)
access(/numbers/16.num, 0000) -> 0
open(/numbers/16.num) -> 0
ioctl(/numbers/16.num, 21505, ...) -> -1
+ alloc_inode() -> 32
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 32{size=0}
+ writing to page: 3
+ grow_inode( ... , 3) 
node_32{ptrs: [44, 0], indir:0 size: 0}
+ alloc_page() -> 44
+ alloc_inode() -> 50
+ copy( 49{size=512) ) ...
node_49{ptrs: [43, 0], indir:0 size: 512}
+ alloc_page() -> 46
+ end of copy_inode( 49{size=512} ) -> 50{size=512}
	[DEBUG] old inum: 3; new inum: 32
+ alloc_inode() -> 58
+ copy( 57{size=192) ) ...
node_57{ptrs: [54, 0], indir:0 size: 192}
+ alloc_page() -> 55
+ end of copy_inode( 57{size=192} ) -> 58{size=192}
	[DEBUG] old inum: 49; new inum: 50
	[DEBUG] adding root (/): 58
+ add_root(58, write /numbers/16.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 0}
node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(35)...
+ shrink_inode( ... , 0) 
node_35{ptrs: [30, 0], indir:0 size: 320}
pnum(35[0]): 30


+ free_page(30)




node_35{ptrs: [30, 0], indir:0 size: 0}
+ free_inode(51)...
+ shrink_inode( ... , 0) 
node_51{ptrs: [47, 0], indir:0 size: 192}
pnum(51[0]): 47


+ free_page(47)




node_51{ptrs: [47, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/9.num r=51}, {write /numbers/10.num}) -> 0
... new version: -> 32 
write(/numbers/16.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/17.num)
getattr(/numbers/17.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/17.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 544) 
node_50{ptrs: [46, 0], indir:0 size: 512}
+ dirent_6 = '17.num'
mknod(/numbers/17.num, 100664) -> 0
+ storage_stat(/numbers/17.num)
getattr(/numbers/17.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/17.num)
access(/numbers/17.num, 0000) -> 0
open(/numbers/17.num) -> 0
ioctl(/numbers/17.num, 21505, ...) -> -1
+ alloc_inode() -> 35
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 35{size=0}
+ writing to page: 6
+ grow_inode( ... , 3) 
node_35{ptrs: [30, 0], indir:0 size: 0}
+ alloc_page() -> 30
+ alloc_inode() -> 51
+ copy( 50{size=544) ) ...
node_50{ptrs: [46, 0], indir:0 size: 544}
+ alloc_page() -> 47
+ end of copy_inode( 50{size=544} ) -> 51{size=544}
	[DEBUG] old inum: 6; new inum: 35
+ alloc_inode() -> 59
+ copy( 58{size=192) ) ...
node_58{ptrs: [55, 0], indir:0 size: 192}
+ alloc_page() -> 56
+ end of copy_inode( 58{size=192} ) -> 59{size=192}
	[DEBUG] old inum: 50; new inum: 51
	[DEBUG] adding root (/): 59
+ add_root(59, write /numbers/17.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 0}
node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(37)...
+ shrink_inode( ... , 0) 
node_37{ptrs: [32, 0], indir:0 size: 352}
pnum(37[0]): 32


+ free_page(32)




node_37{ptrs: [32, 0], indir:0 size: 0}
+ free_inode(52)...
+ shrink_inode( ... , 0) 
node_52{ptrs: [48, 0], indir:0 size: 192}
pnum(52[0]): 48


+ free_page(48)




node_52{ptrs: [48, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/10.num r=52}, {write /numbers/11.num}) -> 0
... new version: -> 33 
write(/numbers/17.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/18.num)
getattr(/numbers/18.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/18.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 576) 
node_51{ptrs: [47, 0], indir:0 size: 544}
+ dirent_2 = '18.num'
mknod(/numbers/18.num, 100664) -> 0
+ storage_stat(/numbers/18.num)
getattr(/numbers/18.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/18.num)
access(/numbers/18.num, 0000) -> 0
open(/numbers/18.num) -> 0
ioctl(/numbers/18.num, 21505, ...) -> -1
+ alloc_inode() -> 37
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 37{size=0}
+ writing to page: 2
+ grow_inode( ... , 3) 
node_37{ptrs: [32, 0], indir:0 size: 0}
+ alloc_page() -> 32
+ alloc_inode() -> 52
+ copy( 51{size=576) ) ...
node_51{ptrs: [47, 0], indir:0 size: 576}
+ alloc_page() -> 48
+ end of copy_inode( 51{size=576} ) -> 52{size=576}
	[DEBUG] old inum: 2; new inum: 37
+ alloc_inode() -> 60
+ copy( 59{size=192) ) ...
node_59{ptrs: [56, 0], indir:0 size: 192}
+ alloc_page() -> 57
+ end of copy_inode( 59{size=192} ) -> 60{size=192}
	[DEBUG] old inum: 51; new inum: 52
	[DEBUG] adding root (/): 60
+ add_root(60, write /numbers/18.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 0}
node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(39)...
+ shrink_inode( ... , 0) 
node_39{ptrs: [35, 0], indir:0 size: 384}
pnum(39[0]): 35


+ free_page(35)




node_39{ptrs: [35, 0], indir:0 size: 0}
+ free_inode(53)...
+ shrink_inode( ... , 0) 
node_53{ptrs: [49, 0], indir:0 size: 192}
pnum(53[0]): 49


+ free_page(49)




node_53{ptrs: [49, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/11.num r=53}, {write /numbers/12.num}) -> 0
... new version: -> 34 
write(/numbers/18.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/19.num)
getattr(/numbers/19.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/19.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 608) 
node_52{ptrs: [48, 0], indir:0 size: 576}
+ dirent_10 = '19.num'
mknod(/numbers/19.num, 100664) -> 0
+ storage_stat(/numbers/19.num)
getattr(/numbers/19.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/19.num)
access(/numbers/19.num, 0000) -> 0
open(/numbers/19.num) -> 0
ioctl(/numbers/19.num, 21505, ...) -> -1
+ alloc_inode() -> 39
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 39{size=0}
+ writing to page: 10
+ grow_inode( ... , 3) 
node_39{ptrs: [35, 0], indir:0 size: 0}
+ alloc_page() -> 35
+ alloc_inode() -> 53
+ copy( 52{size=608) ) ...
node_52{ptrs: [48, 0], indir:0 size: 608}
+ alloc_page() -> 49
+ end of copy_inode( 52{size=608} ) -> 53{size=608}
	[DEBUG] old inum: 10; new inum: 39
+ alloc_inode() -> 61
+ copy( 60{size=192) ) ...
node_60{ptrs: [57, 0], indir:0 size: 192}
+ alloc_page() -> 58
+ end of copy_inode( 60{size=192} ) -> 61{size=192}
	[DEBUG] old inum: 52; new inum: 53
	[DEBUG] adding root (/): 61
+ add_root(61, write /numbers/19.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 0}
node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(41)...
+ shrink_inode( ... , 0) 
node_41{ptrs: [36, 0], indir:0 size: 416}
pnum(41[0]): 36


+ free_page(36)




node_41{ptrs: [36, 0], indir:0 size: 0}
+ free_inode(54)...
+ shrink_inode( ... , 0) 
node_54{ptrs: [50, 0], indir:0 size: 192}
pnum(54[0]): 50


+ free_page(50)




node_54{ptrs: [50, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/12.num r=54}, {write /numbers/13.num}) -> 0
... new version: -> 35 
write(/numbers/19.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/20.num)
getattr(/numbers/20.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/20.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 640) 
node_53{ptrs: [49, 0], indir:0 size: 608}
+ dirent_14 = '20.num'
mknod(/numbers/20.num, 100664) -> 0
+ storage_stat(/numbers/20.num)
getattr(/numbers/20.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/20.num)
access(/numbers/20.num, 0000) -> 0
open(/numbers/20.num) -> 0
ioctl(/numbers/20.num, 21505, ...) -> -1
+ alloc_inode() -> 41
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 41{size=0}
+ writing to page: 14
+ grow_inode( ... , 3) 
node_41{ptrs: [36, 0], indir:0 size: 0}
+ alloc_page() -> 36
+ alloc_inode() -> 54
+ copy( 53{size=640) ) ...
node_53{ptrs: [49, 0], indir:0 size: 640}
+ alloc_page() -> 50
+ end of copy_inode( 53{size=640} ) -> 54{size=640}
	[DEBUG] old inum: 14; new inum: 41
+ alloc_inode() -> 62
+ copy( 61{size=192) ) ...
node_61{ptrs: [58, 0], indir:0 size: 192}
+ alloc_page() -> 59
+ end of copy_inode( 61{size=192} ) -> 62{size=192}
	[DEBUG] old inum: 53; new inum: 54
	[DEBUG] adding root (/): 62
+ add_root(62, write /numbers/20.num) -> ...
+ free_inode(44)...
+ shrink_inode( ... , 0) 
node_44{ptrs: [17, 0], indir:0 size: 0}
node_44{ptrs: [17, 0], indir:0 size: 0}
+ free_inode(43)...
+ shrink_inode( ... , 0) 
node_43{ptrs: [38, 0], indir:0 size: 448}
pnum(43[0]): 38


+ free_page(38)




node_43{ptrs: [38, 0], indir:0 size: 0}
+ free_inode(55)...
+ shrink_inode( ... , 0) 
node_55{ptrs: [51, 0], indir:0 size: 192}
pnum(55[0]): 51


+ free_page(51)




node_55{ptrs: [51, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/13.num r=55}, {write /numbers/14.num}) -> 0
... new version: -> 36 
write(/numbers/20.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/21.num)
getattr(/numbers/21.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/21.num, 33204)
+ alloc_inode() -> 43
+ grow_inode( ... , 672) 
node_54{ptrs: [50, 0], indir:0 size: 640}
+ dirent_43 = '21.num'
mknod(/numbers/21.num, 100664) -> 0
+ storage_stat(/numbers/21.num)
getattr(/numbers/21.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/21.num)
access(/numbers/21.num, 0000) -> 0
open(/numbers/21.num) -> 0
ioctl(/numbers/21.num, 21505, ...) -> -1
+ alloc_inode() -> 44
+ copy( 43{size=0) ) ...
node_43{ptrs: [38, 0], indir:0 size: 0}
+ end of copy_inode( 43{size=0} ) -> 44{size=0}
+ writing to page: 43
+ grow_inode( ... , 3) 
node_44{ptrs: [17, 0], indir:0 size: 0}
+ alloc_page() -> 38
+ alloc_inode() -> 55
+ copy( 54{size=672) ) ...
node_54{ptrs: [50, 0], indir:0 size: 672}
+ alloc_page() -> 51
+ end of copy_inode( 54{size=672} ) -> 55{size=672}
	[DEBUG] old inum: 43; new inum: 44
+ alloc_inode() -> 63
+ copy( 62{size=192) ) ...
node_62{ptrs: [59, 0], indir:0 size: 192}
+ alloc_page() -> 60
+ end of copy_inode( 62{size=192} ) -> 63{size=192}
	[DEBUG] old inum: 54; new inum: 55
	[DEBUG] adding root (/): 63
+ add_root(63, write /numbers/21.num) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 0}
node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(46)...
+ shrink_inode( ... , 0) 
node_46{ptrs: [40, 0], indir:0 size: 480}
pnum(46[0]): 40


+ free_page(40)




node_46{ptrs: [40, 0], indir:0 size: 0}
+ free_inode(56)...
+ shrink_inode( ... , 0) 
node_56{ptrs: [52, 0], indir:0 size: 192}
pnum(56[0]): 52


+ free_page(52)




node_56{ptrs: [52, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/14.num r=56}, {write /numbers/15.num}) -> 0
... new version: -> 37 
write(/numbers/21.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/22.num)
getattr(/numbers/22.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/22.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 704) 
node_55{ptrs: [51, 0], indir:0 size: 672}
+ dirent_21 = '22.num'
mknod(/numbers/22.num, 100664) -> 0
+ storage_stat(/numbers/22.num)
getattr(/numbers/22.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/22.num)
access(/numbers/22.num, 0000) -> 0
open(/numbers/22.num) -> 0
ioctl(/numbers/22.num, 21505, ...) -> -1
+ alloc_inode() -> 46
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 46{size=0}
+ writing to page: 21
+ grow_inode( ... , 3) 
node_46{ptrs: [40, 0], indir:0 size: 0}
+ alloc_page() -> 40
+ alloc_inode() -> 56
+ copy( 55{size=704) ) ...
node_55{ptrs: [51, 0], indir:0 size: 704}
+ alloc_page() -> 52
+ end of copy_inode( 55{size=704} ) -> 56{size=704}
	[DEBUG] old inum: 21; new inum: 46
+ alloc_inode() -> 64
+ copy( 63{size=192) ) ...
node_63{ptrs: [60, 0], indir:0 size: 192}
+ alloc_page() -> 62
+ end of copy_inode( 63{size=192} ) -> 64{size=192}
	[DEBUG] old inum: 55; new inum: 56
	[DEBUG] adding root (/): 64
+ add_root(64, write /numbers/22.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(49)...
+ shrink_inode( ... , 0) 
node_49{ptrs: [43, 0], indir:0 size: 512}
pnum(49[0]): 43


+ free_page(43)




node_49{ptrs: [43, 0], indir:0 size: 0}
+ free_inode(57)...
+ shrink_inode( ... , 0) 
node_57{ptrs: [54, 0], indir:0 size: 192}
pnum(57[0]): 54


+ free_page(54)




node_57{ptrs: [54, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/15.num r=57}, {write /numbers/16.num}) -> 0
... new version: -> 38 
write(/numbers/22.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/23.num)
getattr(/numbers/23.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/23.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 736) 
node_56{ptrs: [52, 0], indir:0 size: 704}
+ dirent_3 = '23.num'
mknod(/numbers/23.num, 100664) -> 0
+ storage_stat(/numbers/23.num)
getattr(/numbers/23.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/23.num)
access(/numbers/23.num, 0000) -> 0
open(/numbers/23.num) -> 0
ioctl(/numbers/23.num, 21505, ...) -> -1
+ alloc_inode() -> 49
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 49{size=0}
+ writing to page: 3
+ grow_inode( ... , 3) 
node_49{ptrs: [43, 0], indir:0 size: 0}
+ alloc_page() -> 43
+ alloc_inode() -> 57
+ copy( 56{size=736) ) ...
node_56{ptrs: [52, 0], indir:0 size: 736}
+ alloc_page() -> 54
+ end of copy_inode( 56{size=736} ) -> 57{size=736}
	[DEBUG] old inum: 3; new inum: 49
+ alloc_inode() -> 65
+ copy( 64{size=192) ) ...
node_64{ptrs: [62, 0], indir:0 size: 192}
+ alloc_page() -> 63
+ end of copy_inode( 64{size=192} ) -> 65{size=192}
	[DEBUG] old inum: 56; new inum: 57
	[DEBUG] adding root (/): 65
+ add_root(65, write /numbers/23.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 0}
node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(50)...
+ shrink_inode( ... , 0) 
node_50{ptrs: [46, 0], indir:0 size: 544}
pnum(50[0]): 46


+ free_page(46)




node_50{ptrs: [46, 0], indir:0 size: 0}
+ free_inode(58)...
+ shrink_inode( ... , 0) 
node_58{ptrs: [55, 0], indir:0 size: 192}
pnum(58[0]): 55


+ free_page(55)




node_58{ptrs: [55, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/16.num r=58}, {write /numbers/17.num}) -> 0
... new version: -> 39 
write(/numbers/23.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/24.num)
getattr(/numbers/24.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/24.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 768) 
node_57{ptrs: [54, 0], indir:0 size: 736}
+ dirent_6 = '24.num'
mknod(/numbers/24.num, 100664) -> 0
+ storage_stat(/numbers/24.num)
getattr(/numbers/24.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/24.num)
access(/numbers/24.num, 0000) -> 0
open(/numbers/24.num) -> 0
ioctl(/numbers/24.num, 21505, ...) -> -1
+ alloc_inode() -> 50
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 50{size=0}
+ writing to page: 6
+ grow_inode( ... , 3) 
node_50{ptrs: [46, 0], indir:0 size: 0}
+ alloc_page() -> 46
+ alloc_inode() -> 58
+ copy( 57{size=768) ) ...
node_57{ptrs: [54, 0], indir:0 size: 768}
+ alloc_page() -> 55
+ end of copy_inode( 57{size=768} ) -> 58{size=768}
	[DEBUG] old inum: 6; new inum: 50
+ alloc_inode() -> 66
+ copy( 65{size=192) ) ...
node_65{ptrs: [63, 0], indir:0 size: 192}
+ alloc_page() -> 64
+ end of copy_inode( 65{size=192} ) -> 66{size=192}
	[DEBUG] old inum: 57; new inum: 58
	[DEBUG] adding root (/): 66
+ add_root(66, write /numbers/24.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 0}
node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(51)...
+ shrink_inode( ... , 0) 
node_51{ptrs: [47, 0], indir:0 size: 576}
pnum(51[0]): 47


+ free_page(47)




node_51{ptrs: [47, 0], indir:0 size: 0}
+ free_inode(59)...
+ shrink_inode( ... , 0) 
node_59{ptrs: [56, 0], indir:0 size: 192}
pnum(59[0]): 56


+ free_page(56)




node_59{ptrs: [56, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/17.num r=59}, {write /numbers/18.num}) -> 0
... new version: -> 40 
write(/numbers/24.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/25.num)
getattr(/numbers/25.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/25.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 800) 
node_58{ptrs: [55, 0], indir:0 size: 768}
+ dirent_2 = '25.num'
mknod(/numbers/25.num, 100664) -> 0
+ storage_stat(/numbers/25.num)
getattr(/numbers/25.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/25.num)
access(/numbers/25.num, 0000) -> 0
open(/numbers/25.num) -> 0
ioctl(/numbers/25.num, 21505, ...) -> -1
+ alloc_inode() -> 51
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 51{size=0}
+ writing to page: 2
+ grow_inode( ... , 3) 
node_51{ptrs: [47, 0], indir:0 size: 0}
+ alloc_page() -> 47
+ alloc_inode() -> 59
+ copy( 58{size=800) ) ...
node_58{ptrs: [55, 0], indir:0 size: 800}
+ alloc_page() -> 56
+ end of copy_inode( 58{size=800} ) -> 59{size=800}
	[DEBUG] old inum: 2; new inum: 51
+ alloc_inode() -> 67
+ copy( 66{size=192) ) ...
node_66{ptrs: [64, 0], indir:0 size: 192}
+ alloc_page() -> 65
+ end of copy_inode( 66{size=192} ) -> 67{size=192}
	[DEBUG] old inum: 58; new inum: 59
	[DEBUG] adding root (/): 67
+ add_root(67, write /numbers/25.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 0}
node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(52)...
+ shrink_inode( ... , 0) 
node_52{ptrs: [48, 0], indir:0 size: 608}
pnum(52[0]): 48


+ free_page(48)




node_52{ptrs: [48, 0], indir:0 size: 0}
+ free_inode(60)...
+ shrink_inode( ... , 0) 
node_60{ptrs: [57, 0], indir:0 size: 192}
pnum(60[0]): 57


+ free_page(57)




node_60{ptrs: [57, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/18.num r=60}, {write /numbers/19.num}) -> 0
... new version: -> 41 
write(/numbers/25.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/26.num)
getattr(/numbers/26.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/26.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 832) 
node_59{ptrs: [56, 0], indir:0 size: 800}
+ dirent_10 = '26.num'
mknod(/numbers/26.num, 100664) -> 0
+ storage_stat(/numbers/26.num)
getattr(/numbers/26.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/26.num)
access(/numbers/26.num, 0000) -> 0
open(/numbers/26.num) -> 0
ioctl(/numbers/26.num, 21505, ...) -> -1
+ alloc_inode() -> 52
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 52{size=0}
+ writing to page: 10
+ grow_inode( ... , 3) 
node_52{ptrs: [48, 0], indir:0 size: 0}
+ alloc_page() -> 48
+ alloc_inode() -> 60
+ copy( 59{size=832) ) ...
node_59{ptrs: [56, 0], indir:0 size: 832}
+ alloc_page() -> 57
+ end of copy_inode( 59{size=832} ) -> 60{size=832}
	[DEBUG] old inum: 10; new inum: 52
+ alloc_inode() -> 68
+ copy( 67{size=192) ) ...
node_67{ptrs: [65, 0], indir:0 size: 192}
+ alloc_page() -> 66
+ end of copy_inode( 67{size=192} ) -> 68{size=192}
	[DEBUG] old inum: 59; new inum: 60
	[DEBUG] adding root (/): 68
+ add_root(68, write /numbers/26.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 0}
node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(53)...
+ shrink_inode( ... , 0) 
node_53{ptrs: [49, 0], indir:0 size: 640}
pnum(53[0]): 49


+ free_page(49)




node_53{ptrs: [49, 0], indir:0 size: 0}
+ free_inode(61)...
+ shrink_inode( ... , 0) 
node_61{ptrs: [58, 0], indir:0 size: 192}
pnum(61[0]): 58


+ free_page(58)




node_61{ptrs: [58, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/19.num r=61}, {write /numbers/20.num}) -> 0
... new version: -> 42 
write(/numbers/26.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/27.num)
getattr(/numbers/27.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/27.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 864) 
node_60{ptrs: [57, 0], indir:0 size: 832}
+ dirent_14 = '27.num'
mknod(/numbers/27.num, 100664) -> 0
+ storage_stat(/numbers/27.num)
getattr(/numbers/27.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/27.num)
access(/numbers/27.num, 0000) -> 0
open(/numbers/27.num) -> 0
ioctl(/numbers/27.num, 21505, ...) -> -1
+ alloc_inode() -> 53
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 53{size=0}
+ writing to page: 14
+ grow_inode( ... , 3) 
node_53{ptrs: [49, 0], indir:0 size: 0}
+ alloc_page() -> 49
+ alloc_inode() -> 61
+ copy( 60{size=864) ) ...
node_60{ptrs: [57, 0], indir:0 size: 864}
+ alloc_page() -> 58
+ end of copy_inode( 60{size=864} ) -> 61{size=864}
	[DEBUG] old inum: 14; new inum: 53
+ alloc_inode() -> 69
+ copy( 68{size=192) ) ...
node_68{ptrs: [66, 0], indir:0 size: 192}
+ alloc_page() -> 67
+ end of copy_inode( 68{size=192} ) -> 69{size=192}
	[DEBUG] old inum: 60; new inum: 61
	[DEBUG] adding root (/): 69
+ add_root(69, write /numbers/27.num) -> ...
+ free_inode(43)...
+ shrink_inode( ... , 0) 
node_43{ptrs: [38, 0], indir:0 size: 0}
node_43{ptrs: [38, 0], indir:0 size: 0}
+ free_inode(54)...
+ shrink_inode( ... , 0) 
node_54{ptrs: [50, 0], indir:0 size: 672}
pnum(54[0]): 50


+ free_page(50)




node_54{ptrs: [50, 0], indir:0 size: 0}
+ free_inode(62)...
+ shrink_inode( ... , 0) 
node_62{ptrs: [59, 0], indir:0 size: 192}
pnum(62[0]): 59


+ free_page(59)




node_62{ptrs: [59, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/20.num r=62}, {write /numbers/21.num}) -> 0
... new version: -> 43 
write(/numbers/27.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/28.num)
getattr(/numbers/28.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/28.num, 33204)
+ alloc_inode() -> 43
+ grow_inode( ... , 896) 
node_61{ptrs: [58, 0], indir:0 size: 864}
+ dirent_43 = '28.num'
mknod(/numbers/28.num, 100664) -> 0
+ storage_stat(/numbers/28.num)
getattr(/numbers/28.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/28.num)
access(/numbers/28.num, 0000) -> 0
open(/numbers/28.num) -> 0
ioctl(/numbers/28.num, 21505, ...) -> -1
+ alloc_inode() -> 54
+ copy( 43{size=0) ) ...
node_43{ptrs: [38, 0], indir:0 size: 0}
+ end of copy_inode( 43{size=0} ) -> 54{size=0}
+ writing to page: 43
+ grow_inode( ... , 3) 
node_54{ptrs: [50, 0], indir:0 size: 0}
+ alloc_page() -> 50
+ alloc_inode() -> 62
+ copy( 61{size=896) ) ...
node_61{ptrs: [58, 0], indir:0 size: 896}
+ alloc_page() -> 59
+ end of copy_inode( 61{size=896} ) -> 62{size=896}
	[DEBUG] old inum: 43; new inum: 54
+ alloc_inode() -> 70
+ copy( 69{size=192) ) ...
node_69{ptrs: [67, 0], indir:0 size: 192}
+ alloc_page() -> 68
+ end of copy_inode( 69{size=192} ) -> 70{size=192}
	[DEBUG] old inum: 61; new inum: 62
	[DEBUG] adding root (/): 70
+ add_root(70, write /numbers/28.num) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 0}
node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(55)...
+ shrink_inode( ... , 0) 
node_55{ptrs: [51, 0], indir:0 size: 704}
pnum(55[0]): 51


+ free_page(51)




node_55{ptrs: [51, 0], indir:0 size: 0}
+ free_inode(63)...
+ shrink_inode( ... , 0) 
node_63{ptrs: [60, 0], indir:0 size: 192}
pnum(63[0]): 60


+ free_page(60)




node_63{ptrs: [60, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/21.num r=63}, {write /numbers/22.num}) -> 0
... new version: -> 44 
write(/numbers/28.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/29.num)
getattr(/numbers/29.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/29.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 928) 
node_62{ptrs: [59, 0], indir:0 size: 896}
+ dirent_21 = '29.num'
mknod(/numbers/29.num, 100664) -> 0
+ storage_stat(/numbers/29.num)
getattr(/numbers/29.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/29.num)
access(/numbers/29.num, 0000) -> 0
open(/numbers/29.num) -> 0
ioctl(/numbers/29.num, 21505, ...) -> -1
+ alloc_inode() -> 55
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 55{size=0}
+ writing to page: 21
+ grow_inode( ... , 3) 
node_55{ptrs: [51, 0], indir:0 size: 0}
+ alloc_page() -> 51
+ alloc_inode() -> 63
+ copy( 62{size=928) ) ...
node_62{ptrs: [59, 0], indir:0 size: 928}
+ alloc_page() -> 60
+ end of copy_inode( 62{size=928} ) -> 63{size=928}
	[DEBUG] old inum: 21; new inum: 55
+ alloc_inode() -> 71
+ copy( 70{size=192) ) ...
node_70{ptrs: [68, 0], indir:0 size: 192}
+ alloc_page() -> 69
+ end of copy_inode( 70{size=192} ) -> 71{size=192}
	[DEBUG] old inum: 62; new inum: 63
	[DEBUG] adding root (/): 71
+ add_root(71, write /numbers/29.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(56)...
+ shrink_inode( ... , 0) 
node_56{ptrs: [52, 0], indir:0 size: 736}
pnum(56[0]): 52


+ free_page(52)




node_56{ptrs: [52, 0], indir:0 size: 0}
+ free_inode(64)...
+ shrink_inode( ... , 0) 
node_64{ptrs: [62, 0], indir:0 size: 192}
pnum(64[0]): 62


+ free_page(62)




node_64{ptrs: [62, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/22.num r=64}, {write /numbers/23.num}) -> 0
... new version: -> 45 
write(/numbers/29.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/30.num)
getattr(/numbers/30.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/30.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 960) 
node_63{ptrs: [60, 0], indir:0 size: 928}
+ dirent_3 = '30.num'
mknod(/numbers/30.num, 100664) -> 0
+ storage_stat(/numbers/30.num)
getattr(/numbers/30.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/30.num)
access(/numbers/30.num, 0000) -> 0
open(/numbers/30.num) -> 0
ioctl(/numbers/30.num, 21505, ...) -> -1
+ alloc_inode() -> 56
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 56{size=0}
+ writing to page: 3
+ grow_inode( ... , 3) 
node_56{ptrs: [52, 0], indir:0 size: 0}
+ alloc_page() -> 52
+ alloc_inode() -> 64
+ copy( 63{size=960) ) ...
node_63{ptrs: [60, 0], indir:0 size: 960}
+ alloc_page() -> 62
+ end of copy_inode( 63{size=960} ) -> 64{size=960}
	[DEBUG] old inum: 3; new inum: 56
+ alloc_inode() -> 72
+ copy( 71{size=192) ) ...
node_71{ptrs: [69, 0], indir:0 size: 192}
+ alloc_page() -> 86
+ end of copy_inode( 71{size=192} ) -> 72{size=192}
	[DEBUG] old inum: 63; new inum: 64
	[DEBUG] adding root (/): 72
+ add_root(72, write /numbers/30.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 0}
node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(57)...
+ shrink_inode( ... , 0) 
node_57{ptrs: [54, 0], indir:0 size: 768}
pnum(57[0]): 54


+ free_page(54)




node_57{ptrs: [54, 0], indir:0 size: 0}
+ free_inode(65)...
+ shrink_inode( ... , 0) 
node_65{ptrs: [63, 0], indir:0 size: 192}
pnum(65[0]): 63


+ free_page(63)




node_65{ptrs: [63, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/23.num r=65}, {write /numbers/24.num}) -> 0
... new version: -> 46 
write(/numbers/30.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/31.num)
getattr(/numbers/31.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/31.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 992) 
node_64{ptrs: [62, 0], indir:0 size: 960}
+ dirent_6 = '31.num'
mknod(/numbers/31.num, 100664) -> 0
+ storage_stat(/numbers/31.num)
getattr(/numbers/31.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/31.num)
access(/numbers/31.num, 0000) -> 0
open(/numbers/31.num) -> 0
ioctl(/numbers/31.num, 21505, ...) -> -1
+ alloc_inode() -> 57
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 57{size=0}
+ writing to page: 6
+ grow_inode( ... , 3) 
node_57{ptrs: [54, 0], indir:0 size: 0}
+ alloc_page() -> 54
+ alloc_inode() -> 65
+ copy( 64{size=992) ) ...
node_64{ptrs: [62, 0], indir:0 size: 992}
+ alloc_page() -> 63
+ end of copy_inode( 64{size=992} ) -> 65{size=992}
	[DEBUG] old inum: 6; new inum: 57
+ alloc_inode() -> 73
+ copy( 72{size=192) ) ...
node_72{ptrs: [86, 0], indir:0 size: 192}
+ alloc_page() -> 87
+ end of copy_inode( 72{size=192} ) -> 73{size=192}
	[DEBUG] old inum: 64; new inum: 65
	[DEBUG] adding root (/): 73
+ add_root(73, write /numbers/31.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 0}
node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(58)...
+ shrink_inode( ... , 0) 
node_58{ptrs: [55, 0], indir:0 size: 800}
pnum(58[0]): 55


+ free_page(55)




node_58{ptrs: [55, 0], indir:0 size: 0}
+ free_inode(66)...
+ shrink_inode( ... , 0) 
node_66{ptrs: [64, 0], indir:0 size: 192}
pnum(66[0]): 64


+ free_page(64)




node_66{ptrs: [64, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/24.num r=66}, {write /numbers/25.num}) -> 0
... new version: -> 47 
write(/numbers/31.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/32.num)
getattr(/numbers/32.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/32.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 1024) 
node_65{ptrs: [63, 0], indir:0 size: 992}
+ dirent_2 = '32.num'
mknod(/numbers/32.num, 100664) -> 0
+ storage_stat(/numbers/32.num)
getattr(/numbers/32.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/32.num)
access(/numbers/32.num, 0000) -> 0
open(/numbers/32.num) -> 0
ioctl(/numbers/32.num, 21505, ...) -> -1
+ alloc_inode() -> 58
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 58{size=0}
+ writing to page: 2
+ grow_inode( ... , 3) 
node_58{ptrs: [55, 0], indir:0 size: 0}
+ alloc_page() -> 55
+ alloc_inode() -> 66
+ copy( 65{size=1024) ) ...
node_65{ptrs: [63, 0], indir:0 size: 1024}
+ alloc_page() -> 64
+ end of copy_inode( 65{size=1024} ) -> 66{size=1024}
	[DEBUG] old inum: 2; new inum: 58
+ alloc_inode() -> 74
+ copy( 73{size=192) ) ...
node_73{ptrs: [87, 0], indir:0 size: 192}
+ alloc_page() -> 88
+ end of copy_inode( 73{size=192} ) -> 74{size=192}
	[DEBUG] old inum: 65; new inum: 66
	[DEBUG] adding root (/): 74
+ add_root(74, write /numbers/32.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 0}
node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(59)...
+ shrink_inode( ... , 0) 
node_59{ptrs: [56, 0], indir:0 size: 832}
pnum(59[0]): 56


+ free_page(56)




node_59{ptrs: [56, 0], indir:0 size: 0}
+ free_inode(67)...
+ shrink_inode( ... , 0) 
node_67{ptrs: [65, 0], indir:0 size: 192}
pnum(67[0]): 65


+ free_page(65)




node_67{ptrs: [65, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/25.num r=67}, {write /numbers/26.num}) -> 0
... new version: -> 48 
write(/numbers/32.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/33.num)
getattr(/numbers/33.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/33.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 1056) 
node_66{ptrs: [64, 0], indir:0 size: 1024}
+ dirent_10 = '33.num'
mknod(/numbers/33.num, 100664) -> 0
+ storage_stat(/numbers/33.num)
getattr(/numbers/33.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/33.num)
access(/numbers/33.num, 0000) -> 0
open(/numbers/33.num) -> 0
ioctl(/numbers/33.num, 21505, ...) -> -1
+ alloc_inode() -> 59
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 59{size=0}
+ writing to page: 10
+ grow_inode( ... , 3) 
node_59{ptrs: [56, 0], indir:0 size: 0}
+ alloc_page() -> 56
+ alloc_inode() -> 67
+ copy( 66{size=1056) ) ...
node_66{ptrs: [64, 0], indir:0 size: 1056}
+ alloc_page() -> 65
+ end of copy_inode( 66{size=1056} ) -> 67{size=1056}
	[DEBUG] old inum: 10; new inum: 59
+ alloc_inode() -> 75
+ copy( 74{size=192) ) ...
node_74{ptrs: [88, 0], indir:0 size: 192}
+ alloc_page() -> 89
+ end of copy_inode( 74{size=192} ) -> 75{size=192}
	[DEBUG] old inum: 66; new inum: 67
	[DEBUG] adding root (/): 75
+ add_root(75, write /numbers/33.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 0}
node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(60)...
+ shrink_inode( ... , 0) 
node_60{ptrs: [57, 0], indir:0 size: 864}
pnum(60[0]): 57


+ free_page(57)




node_60{ptrs: [57, 0], indir:0 size: 0}
+ free_inode(68)...
+ shrink_inode( ... , 0) 
node_68{ptrs: [66, 0], indir:0 size: 192}
pnum(68[0]): 66


+ free_page(66)




node_68{ptrs: [66, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/26.num r=68}, {write /numbers/27.num}) -> 0
... new version: -> 49 
write(/numbers/33.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/34.num)
getattr(/numbers/34.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/34.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 1088) 
node_67{ptrs: [65, 0], indir:0 size: 1056}
+ dirent_14 = '34.num'
mknod(/numbers/34.num, 100664) -> 0
+ storage_stat(/numbers/34.num)
getattr(/numbers/34.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/34.num)
access(/numbers/34.num, 0000) -> 0
open(/numbers/34.num) -> 0
ioctl(/numbers/34.num, 21505, ...) -> -1
+ alloc_inode() -> 60
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 60{size=0}
+ writing to page: 14
+ grow_inode( ... , 3) 
node_60{ptrs: [57, 0], indir:0 size: 0}
+ alloc_page() -> 57
+ alloc_inode() -> 68
+ copy( 67{size=1088) ) ...
node_67{ptrs: [65, 0], indir:0 size: 1088}
+ alloc_page() -> 66
+ end of copy_inode( 67{size=1088} ) -> 68{size=1088}
	[DEBUG] old inum: 14; new inum: 60
+ alloc_inode() -> 76
+ copy( 75{size=192) ) ...
node_75{ptrs: [89, 0], indir:0 size: 192}
+ alloc_page() -> 90
+ end of copy_inode( 75{size=192} ) -> 76{size=192}
	[DEBUG] old inum: 67; new inum: 68
	[DEBUG] adding root (/): 76
+ add_root(76, write /numbers/34.num) -> ...
+ free_inode(43)...
+ shrink_inode( ... , 0) 
node_43{ptrs: [38, 0], indir:0 size: 0}
node_43{ptrs: [38, 0], indir:0 size: 0}
+ free_inode(61)...
+ shrink_inode( ... , 0) 
node_61{ptrs: [58, 0], indir:0 size: 896}
pnum(61[0]): 58


+ free_page(58)




node_61{ptrs: [58, 0], indir:0 size: 0}
+ free_inode(69)...
+ shrink_inode( ... , 0) 
node_69{ptrs: [67, 0], indir:0 size: 192}
pnum(69[0]): 67


+ free_page(67)




node_69{ptrs: [67, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/27.num r=69}, {write /numbers/28.num}) -> 0
... new version: -> 50 
write(/numbers/34.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/35.num)
getattr(/numbers/35.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/35.num, 33204)
+ alloc_inode() -> 43
+ grow_inode( ... , 1120) 
node_68{ptrs: [66, 0], indir:0 size: 1088}
+ dirent_43 = '35.num'
mknod(/numbers/35.num, 100664) -> 0
+ storage_stat(/numbers/35.num)
getattr(/numbers/35.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/35.num)
access(/numbers/35.num, 0000) -> 0
open(/numbers/35.num) -> 0
ioctl(/numbers/35.num, 21505, ...) -> -1
+ alloc_inode() -> 61
+ copy( 43{size=0) ) ...
node_43{ptrs: [38, 0], indir:0 size: 0}
+ end of copy_inode( 43{size=0} ) -> 61{size=0}
+ writing to page: 43
+ grow_inode( ... , 3) 
node_61{ptrs: [58, 0], indir:0 size: 0}
+ alloc_page() -> 58
+ alloc_inode() -> 69
+ copy( 68{size=1120) ) ...
node_68{ptrs: [66, 0], indir:0 size: 1120}
+ alloc_page() -> 67
+ end of copy_inode( 68{size=1120} ) -> 69{size=1120}
	[DEBUG] old inum: 43; new inum: 61
+ alloc_inode() -> 77
+ copy( 76{size=192) ) ...
node_76{ptrs: [90, 0], indir:0 size: 192}
+ alloc_page() -> 91
+ end of copy_inode( 76{size=192} ) -> 77{size=192}
	[DEBUG] old inum: 68; new inum: 69
	[DEBUG] adding root (/): 77
+ add_root(77, write /numbers/35.num) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 0}
node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(62)...
+ shrink_inode( ... , 0) 
node_62{ptrs: [59, 0], indir:0 size: 928}
pnum(62[0]): 59


+ free_page(59)




node_62{ptrs: [59, 0], indir:0 size: 0}
+ free_inode(70)...
+ shrink_inode( ... , 0) 
node_70{ptrs: [68, 0], indir:0 size: 192}
pnum(70[0]): 68


+ free_page(68)




node_70{ptrs: [68, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/28.num r=70}, {write /numbers/29.num}) -> 0
... new version: -> 51 
write(/numbers/35.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/36.num)
getattr(/numbers/36.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/36.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 1152) 
node_69{ptrs: [67, 0], indir:0 size: 1120}
+ dirent_21 = '36.num'
mknod(/numbers/36.num, 100664) -> 0
+ storage_stat(/numbers/36.num)
getattr(/numbers/36.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/36.num)
access(/numbers/36.num, 0000) -> 0
open(/numbers/36.num) -> 0
ioctl(/numbers/36.num, 21505, ...) -> -1
+ alloc_inode() -> 62
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 62{size=0}
+ writing to page: 21
+ grow_inode( ... , 3) 
node_62{ptrs: [59, 0], indir:0 size: 0}
+ alloc_page() -> 59
+ alloc_inode() -> 70
+ copy( 69{size=1152) ) ...
node_69{ptrs: [67, 0], indir:0 size: 1152}
+ alloc_page() -> 68
+ end of copy_inode( 69{size=1152} ) -> 70{size=1152}
	[DEBUG] old inum: 21; new inum: 62
+ alloc_inode() -> 78
+ copy( 77{size=192) ) ...
node_77{ptrs: [91, 0], indir:0 size: 192}
+ alloc_page() -> 92
+ end of copy_inode( 77{size=192} ) -> 78{size=192}
	[DEBUG] old inum: 69; new inum: 70
	[DEBUG] adding root (/): 78
+ add_root(78, write /numbers/36.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(63)...
+ shrink_inode( ... , 0) 
node_63{ptrs: [60, 0], indir:0 size: 960}
pnum(63[0]): 60


+ free_page(60)




node_63{ptrs: [60, 0], indir:0 size: 0}
+ free_inode(71)...
+ shrink_inode( ... , 0) 
node_71{ptrs: [69, 0], indir:0 size: 192}
pnum(71[0]): 69


+ free_page(69)




node_71{ptrs: [69, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/29.num r=71}, {write /numbers/30.num}) -> 0
... new version: -> 52 
write(/numbers/36.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/37.num)
getattr(/numbers/37.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/37.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 1184) 
node_70{ptrs: [68, 0], indir:0 size: 1152}
+ dirent_3 = '37.num'
mknod(/numbers/37.num, 100664) -> 0
+ storage_stat(/numbers/37.num)
getattr(/numbers/37.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/37.num)
access(/numbers/37.num, 0000) -> 0
open(/numbers/37.num) -> 0
ioctl(/numbers/37.num, 21505, ...) -> -1
+ alloc_inode() -> 63
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 63{size=0}
+ writing to page: 3
+ grow_inode( ... , 3) 
node_63{ptrs: [60, 0], indir:0 size: 0}
+ alloc_page() -> 60
+ alloc_inode() -> 71
+ copy( 70{size=1184) ) ...
node_70{ptrs: [68, 0], indir:0 size: 1184}
+ alloc_page() -> 69
+ end of copy_inode( 70{size=1184} ) -> 71{size=1184}
	[DEBUG] old inum: 3; new inum: 63
+ alloc_inode() -> 79
+ copy( 78{size=192) ) ...
node_78{ptrs: [92, 0], indir:0 size: 192}
+ alloc_page() -> 93
+ end of copy_inode( 78{size=192} ) -> 79{size=192}
	[DEBUG] old inum: 70; new inum: 71
	[DEBUG] adding root (/): 79
+ add_root(79, write /numbers/37.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 0}
node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(64)...
+ shrink_inode( ... , 0) 
node_64{ptrs: [62, 0], indir:0 size: 992}
pnum(64[0]): 62


+ free_page(62)




node_64{ptrs: [62, 0], indir:0 size: 0}
+ free_inode(72)...
+ shrink_inode( ... , 0) 
node_72{ptrs: [86, 0], indir:0 size: 192}
pnum(72[0]): 86


+ free_page(86)




node_72{ptrs: [86, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/30.num r=72}, {write /numbers/31.num}) -> 0
... new version: -> 53 
write(/numbers/37.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/38.num)
getattr(/numbers/38.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/38.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 1216) 
node_71{ptrs: [69, 0], indir:0 size: 1184}
+ dirent_6 = '38.num'
mknod(/numbers/38.num, 100664) -> 0
+ storage_stat(/numbers/38.num)
getattr(/numbers/38.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/38.num)
access(/numbers/38.num, 0000) -> 0
open(/numbers/38.num) -> 0
ioctl(/numbers/38.num, 21505, ...) -> -1
+ alloc_inode() -> 64
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 64{size=0}
+ writing to page: 6
+ grow_inode( ... , 3) 
node_64{ptrs: [62, 0], indir:0 size: 0}
+ alloc_page() -> 62
+ alloc_inode() -> 72
+ copy( 71{size=1216) ) ...
node_71{ptrs: [69, 0], indir:0 size: 1216}
+ alloc_page() -> 86
+ end of copy_inode( 71{size=1216} ) -> 72{size=1216}
	[DEBUG] old inum: 6; new inum: 64
+ alloc_inode() -> 80
+ copy( 79{size=192) ) ...
node_79{ptrs: [93, 0], indir:0 size: 192}
+ alloc_page() -> 94
+ end of copy_inode( 79{size=192} ) -> 80{size=192}
	[DEBUG] old inum: 71; new inum: 72
	[DEBUG] adding root (/): 80
+ add_root(80, write /numbers/38.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 0}
node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(65)...
+ shrink_inode( ... , 0) 
node_65{ptrs: [63, 0], indir:0 size: 1024}
pnum(65[0]): 63


+ free_page(63)




node_65{ptrs: [63, 0], indir:0 size: 0}
+ free_inode(73)...
+ shrink_inode( ... , 0) 
node_73{ptrs: [87, 0], indir:0 size: 192}
pnum(73[0]): 87


+ free_page(87)




node_73{ptrs: [87, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/31.num r=73}, {write /numbers/32.num}) -> 0
... new version: -> 54 
write(/numbers/38.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/39.num)
getattr(/numbers/39.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/39.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 1248) 
node_72{ptrs: [86, 0], indir:0 size: 1216}
+ dirent_2 = '39.num'
mknod(/numbers/39.num, 100664) -> 0
+ storage_stat(/numbers/39.num)
getattr(/numbers/39.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/39.num)
access(/numbers/39.num, 0000) -> 0
open(/numbers/39.num) -> 0
ioctl(/numbers/39.num, 21505, ...) -> -1
+ alloc_inode() -> 65
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 65{size=0}
+ writing to page: 2
+ grow_inode( ... , 3) 
node_65{ptrs: [63, 0], indir:0 size: 0}
+ alloc_page() -> 63
+ alloc_inode() -> 73
+ copy( 72{size=1248) ) ...
node_72{ptrs: [86, 0], indir:0 size: 1248}
+ alloc_page() -> 87
+ end of copy_inode( 72{size=1248} ) -> 73{size=1248}
	[DEBUG] old inum: 2; new inum: 65
+ alloc_inode() -> 81
+ copy( 80{size=192) ) ...
node_80{ptrs: [94, 0], indir:0 size: 192}
+ alloc_page() -> 95
+ end of copy_inode( 80{size=192} ) -> 81{size=192}
	[DEBUG] old inum: 72; new inum: 73
	[DEBUG] adding root (/): 81
+ add_root(81, write /numbers/39.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 0}
node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(66)...
+ shrink_inode( ... , 0) 
node_66{ptrs: [64, 0], indir:0 size: 1056}
pnum(66[0]): 64


+ free_page(64)




node_66{ptrs: [64, 0], indir:0 size: 0}
+ free_inode(74)...
+ shrink_inode( ... , 0) 
node_74{ptrs: [88, 0], indir:0 size: 192}
pnum(74[0]): 88


+ free_page(88)




node_74{ptrs: [88, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/32.num r=74}, {write /numbers/33.num}) -> 0
... new version: -> 55 
write(/numbers/39.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/40.num)
getattr(/numbers/40.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/40.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 1280) 
node_73{ptrs: [87, 0], indir:0 size: 1248}
+ dirent_10 = '40.num'
mknod(/numbers/40.num, 100664) -> 0
+ storage_stat(/numbers/40.num)
getattr(/numbers/40.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/40.num)
access(/numbers/40.num, 0000) -> 0
open(/numbers/40.num) -> 0
ioctl(/numbers/40.num, 21505, ...) -> -1
+ alloc_inode() -> 66
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 66{size=0}
+ writing to page: 10
+ grow_inode( ... , 3) 
node_66{ptrs: [64, 0], indir:0 size: 0}
+ alloc_page() -> 64
+ alloc_inode() -> 74
+ copy( 73{size=1280) ) ...
node_73{ptrs: [87, 0], indir:0 size: 1280}
+ alloc_page() -> 88
+ end of copy_inode( 73{size=1280} ) -> 74{size=1280}
	[DEBUG] old inum: 10; new inum: 66
+ alloc_inode() -> 82
+ copy( 81{size=192) ) ...
node_81{ptrs: [95, 0], indir:0 size: 192}
+ alloc_page() -> 96
+ end of copy_inode( 81{size=192} ) -> 82{size=192}
	[DEBUG] old inum: 73; new inum: 74
	[DEBUG] adding root (/): 82
+ add_root(82, write /numbers/40.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 0}
node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(67)...
+ shrink_inode( ... , 0) 
node_67{ptrs: [65, 0], indir:0 size: 1088}
pnum(67[0]): 65


+ free_page(65)




node_67{ptrs: [65, 0], indir:0 size: 0}
+ free_inode(75)...
+ shrink_inode( ... , 0) 
node_75{ptrs: [89, 0], indir:0 size: 192}
pnum(75[0]): 89


+ free_page(89)




node_75{ptrs: [89, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/33.num r=75}, {write /numbers/34.num}) -> 0
... new version: -> 56 
write(/numbers/40.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/41.num)
getattr(/numbers/41.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/41.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 1312) 
node_74{ptrs: [88, 0], indir:0 size: 1280}
+ dirent_14 = '41.num'
mknod(/numbers/41.num, 100664) -> 0
+ storage_stat(/numbers/41.num)
getattr(/numbers/41.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/41.num)
access(/numbers/41.num, 0000) -> 0
open(/numbers/41.num) -> 0
ioctl(/numbers/41.num, 21505, ...) -> -1
+ alloc_inode() -> 67
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 67{size=0}
+ writing to page: 14
+ grow_inode( ... , 3) 
node_67{ptrs: [65, 0], indir:0 size: 0}
+ alloc_page() -> 65
+ alloc_inode() -> 75
+ copy( 74{size=1312) ) ...
node_74{ptrs: [88, 0], indir:0 size: 1312}
+ alloc_page() -> 89
+ end of copy_inode( 74{size=1312} ) -> 75{size=1312}
	[DEBUG] old inum: 14; new inum: 67
+ alloc_inode() -> 83
+ copy( 82{size=192) ) ...
node_82{ptrs: [96, 0], indir:0 size: 192}
+ alloc_page() -> 97
+ end of copy_inode( 82{size=192} ) -> 83{size=192}
	[DEBUG] old inum: 74; new inum: 75
	[DEBUG] adding root (/): 83
+ add_root(83, write /numbers/41.num) -> ...
+ free_inode(43)...
+ shrink_inode( ... , 0) 
node_43{ptrs: [38, 0], indir:0 size: 0}
node_43{ptrs: [38, 0], indir:0 size: 0}
+ free_inode(68)...
+ shrink_inode( ... , 0) 
node_68{ptrs: [66, 0], indir:0 size: 1120}
pnum(68[0]): 66


+ free_page(66)




node_68{ptrs: [66, 0], indir:0 size: 0}
+ free_inode(76)...
+ shrink_inode( ... , 0) 
node_76{ptrs: [90, 0], indir:0 size: 192}
pnum(76[0]): 90


+ free_page(90)




node_76{ptrs: [90, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/34.num r=76}, {write /numbers/35.num}) -> 0
... new version: -> 57 
write(/numbers/41.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/42.num)
getattr(/numbers/42.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/42.num, 33204)
+ alloc_inode() -> 43
+ grow_inode( ... , 1344) 
node_75{ptrs: [89, 0], indir:0 size: 1312}
+ dirent_43 = '42.num'
mknod(/numbers/42.num, 100664) -> 0
+ storage_stat(/numbers/42.num)
getattr(/numbers/42.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/42.num)
access(/numbers/42.num, 0000) -> 0
open(/numbers/42.num) -> 0
ioctl(/numbers/42.num, 21505, ...) -> -1
+ alloc_inode() -> 68
+ copy( 43{size=0) ) ...
node_43{ptrs: [38, 0], indir:0 size: 0}
+ end of copy_inode( 43{size=0} ) -> 68{size=0}
+ writing to page: 43
+ grow_inode( ... , 3) 
node_68{ptrs: [66, 0], indir:0 size: 0}
+ alloc_page() -> 66
+ alloc_inode() -> 76
+ copy( 75{size=1344) ) ...
node_75{ptrs: [89, 0], indir:0 size: 1344}
+ alloc_page() -> 90
+ end of copy_inode( 75{size=1344} ) -> 76{size=1344}
	[DEBUG] old inum: 43; new inum: 68
+ alloc_inode() -> 84
+ copy( 83{size=192) ) ...
node_83{ptrs: [97, 0], indir:0 size: 192}
+ alloc_page() -> 98
+ end of copy_inode( 83{size=192} ) -> 84{size=192}
	[DEBUG] old inum: 75; new inum: 76
	[DEBUG] adding root (/): 84
+ add_root(84, write /numbers/42.num) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 0}
node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(69)...
+ shrink_inode( ... , 0) 
node_69{ptrs: [67, 0], indir:0 size: 1152}
pnum(69[0]): 67


+ free_page(67)




node_69{ptrs: [67, 0], indir:0 size: 0}
+ free_inode(77)...
+ shrink_inode( ... , 0) 
node_77{ptrs: [91, 0], indir:0 size: 192}
pnum(77[0]): 91


+ free_page(91)




node_77{ptrs: [91, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/35.num r=77}, {write /numbers/36.num}) -> 0
... new version: -> 58 
write(/numbers/42.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/43.num)
getattr(/numbers/43.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/43.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 1376) 
node_76{ptrs: [90, 0], indir:0 size: 1344}
+ dirent_21 = '43.num'
mknod(/numbers/43.num, 100664) -> 0
+ storage_stat(/numbers/43.num)
getattr(/numbers/43.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/43.num)
access(/numbers/43.num, 0000) -> 0
open(/numbers/43.num) -> 0
ioctl(/numbers/43.num, 21505, ...) -> -1
+ alloc_inode() -> 69
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 69{size=0}
+ writing to page: 21
+ grow_inode( ... , 3) 
node_69{ptrs: [67, 0], indir:0 size: 0}
+ alloc_page() -> 67
+ alloc_inode() -> 77
+ copy( 76{size=1376) ) ...
node_76{ptrs: [90, 0], indir:0 size: 1376}
+ alloc_page() -> 91
+ end of copy_inode( 76{size=1376} ) -> 77{size=1376}
	[DEBUG] old inum: 21; new inum: 69
+ alloc_inode() -> 85
+ copy( 84{size=192) ) ...
node_84{ptrs: [98, 0], indir:0 size: 192}
+ alloc_page() -> 99
+ end of copy_inode( 84{size=192} ) -> 85{size=192}
	[DEBUG] old inum: 76; new inum: 77
	[DEBUG] adding root (/): 85
+ add_root(85, write /numbers/43.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(70)...
+ shrink_inode( ... , 0) 
node_70{ptrs: [68, 0], indir:0 size: 1184}
pnum(70[0]): 68


+ free_page(68)




node_70{ptrs: [68, 0], indir:0 size: 0}
+ free_inode(78)...
+ shrink_inode( ... , 0) 
node_78{ptrs: [92, 0], indir:0 size: 192}
pnum(78[0]): 92


+ free_page(92)




node_78{ptrs: [92, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/36.num r=78}, {write /numbers/37.num}) -> 0
... new version: -> 59 
write(/numbers/43.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/44.num)
getattr(/numbers/44.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/44.num, 33204)
+ alloc_inode() -> 3
+ grow_inode( ... , 1408) 
node_77{ptrs: [91, 0], indir:0 size: 1376}
+ dirent_3 = '44.num'
mknod(/numbers/44.num, 100664) -> 0
+ storage_stat(/numbers/44.num)
getattr(/numbers/44.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/44.num)
access(/numbers/44.num, 0000) -> 0
open(/numbers/44.num) -> 0
ioctl(/numbers/44.num, 21505, ...) -> -1
+ alloc_inode() -> 70
+ copy( 3{size=0) ) ...
node_3{ptrs: [8, 32], indir:33 size: 0}
+ end of copy_inode( 3{size=0} ) -> 70{size=0}
+ writing to page: 3
+ grow_inode( ... , 3) 
node_70{ptrs: [68, 0], indir:0 size: 0}
+ alloc_page() -> 68
+ alloc_inode() -> 78
+ copy( 77{size=1408) ) ...
node_77{ptrs: [91, 0], indir:0 size: 1408}
+ alloc_page() -> 92
+ end of copy_inode( 77{size=1408} ) -> 78{size=1408}
	[DEBUG] old inum: 3; new inum: 70
+ alloc_inode() -> 86
+ copy( 85{size=192) ) ...
node_85{ptrs: [99, 0], indir:0 size: 192}
+ alloc_page() -> 100
+ end of copy_inode( 85{size=192} ) -> 86{size=192}
	[DEBUG] old inum: 77; new inum: 78
	[DEBUG] adding root (/): 86
+ add_root(86, write /numbers/44.num) -> ...
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 38], indir:39 size: 0}
node_6{ptrs: [10, 38], indir:39 size: 0}
+ free_inode(71)...
+ shrink_inode( ... , 0) 
node_71{ptrs: [69, 0], indir:0 size: 1216}
pnum(71[0]): 69


+ free_page(69)




node_71{ptrs: [69, 0], indir:0 size: 0}
+ free_inode(79)...
+ shrink_inode( ... , 0) 
node_79{ptrs: [93, 0], indir:0 size: 192}
pnum(79[0]): 93


+ free_page(93)




node_79{ptrs: [93, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/37.num r=79}, {write /numbers/38.num}) -> 0
... new version: -> 60 
write(/numbers/44.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/45.num)
getattr(/numbers/45.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/45.num, 33204)
+ alloc_inode() -> 6
+ grow_inode( ... , 1440) 
node_78{ptrs: [92, 0], indir:0 size: 1408}
+ dirent_6 = '45.num'
mknod(/numbers/45.num, 100664) -> 0
+ storage_stat(/numbers/45.num)
getattr(/numbers/45.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/45.num)
access(/numbers/45.num, 0000) -> 0
open(/numbers/45.num) -> 0
ioctl(/numbers/45.num, 21505, ...) -> -1
+ alloc_inode() -> 71
+ copy( 6{size=0) ) ...
node_6{ptrs: [10, 38], indir:39 size: 0}
+ end of copy_inode( 6{size=0} ) -> 71{size=0}
+ writing to page: 6
+ grow_inode( ... , 3) 
node_71{ptrs: [69, 0], indir:0 size: 0}
+ alloc_page() -> 69
+ alloc_inode() -> 79
+ copy( 78{size=1440) ) ...
node_78{ptrs: [92, 0], indir:0 size: 1440}
+ alloc_page() -> 93
+ end of copy_inode( 78{size=1440} ) -> 79{size=1440}
	[DEBUG] old inum: 6; new inum: 71
+ alloc_inode() -> 87
+ copy( 86{size=192) ) ...
node_86{ptrs: [100, 0], indir:0 size: 192}
+ alloc_page() -> 101
+ end of copy_inode( 86{size=192} ) -> 87{size=192}
	[DEBUG] old inum: 78; new inum: 79
	[DEBUG] adding root (/): 87
+ add_root(87, write /numbers/45.num) -> ...
+ free_inode(2)...
+ shrink_inode( ... , 0) 
node_2{ptrs: [7, 12], indir:45 size: 0}
node_2{ptrs: [7, 12], indir:45 size: 0}
+ free_inode(72)...
+ shrink_inode( ... , 0) 
node_72{ptrs: [86, 0], indir:0 size: 1248}
pnum(72[0]): 86


+ free_page(86)




node_72{ptrs: [86, 0], indir:0 size: 0}
+ free_inode(80)...
+ shrink_inode( ... , 0) 
node_80{ptrs: [94, 0], indir:0 size: 192}
pnum(80[0]): 94


+ free_page(94)




node_80{ptrs: [94, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/38.num r=80}, {write /numbers/39.num}) -> 0
... new version: -> 61 
write(/numbers/45.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/46.num)
getattr(/numbers/46.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/46.num, 33204)
+ alloc_inode() -> 2
+ grow_inode( ... , 1472) 
node_79{ptrs: [93, 0], indir:0 size: 1440}
+ dirent_2 = '46.num'
mknod(/numbers/46.num, 100664) -> 0
+ storage_stat(/numbers/46.num)
getattr(/numbers/46.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/46.num)
access(/numbers/46.num, 0000) -> 0
open(/numbers/46.num) -> 0
ioctl(/numbers/46.num, 21505, ...) -> -1
+ alloc_inode() -> 72
+ copy( 2{size=0) ) ...
node_2{ptrs: [7, 12], indir:45 size: 0}
+ end of copy_inode( 2{size=0} ) -> 72{size=0}
+ writing to page: 2
+ grow_inode( ... , 3) 
node_72{ptrs: [86, 0], indir:0 size: 0}
+ alloc_page() -> 86
+ alloc_inode() -> 80
+ copy( 79{size=1472) ) ...
node_79{ptrs: [93, 0], indir:0 size: 1472}
+ alloc_page() -> 94
+ end of copy_inode( 79{size=1472} ) -> 80{size=1472}
	[DEBUG] old inum: 2; new inum: 72
+ alloc_inode() -> 88
+ copy( 87{size=192) ) ...
node_87{ptrs: [101, 0], indir:0 size: 192}
+ alloc_page() -> 102
+ end of copy_inode( 87{size=192} ) -> 88{size=192}
	[DEBUG] old inum: 79; new inum: 80
	[DEBUG] adding root (/): 88
+ add_root(88, write /numbers/46.num) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [15, 52], indir:53 size: 0}
node_10{ptrs: [15, 52], indir:53 size: 0}
+ free_inode(73)...
+ shrink_inode( ... , 0) 
node_73{ptrs: [87, 0], indir:0 size: 1280}
pnum(73[0]): 87


+ free_page(87)




node_73{ptrs: [87, 0], indir:0 size: 0}
+ free_inode(81)...
+ shrink_inode( ... , 0) 
node_81{ptrs: [95, 0], indir:0 size: 192}
pnum(81[0]): 95


+ free_page(95)




node_81{ptrs: [95, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/39.num r=81}, {write /numbers/40.num}) -> 0
... new version: -> 62 
write(/numbers/46.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/47.num)
getattr(/numbers/47.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/47.num, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 1504) 
node_80{ptrs: [94, 0], indir:0 size: 1472}
+ dirent_10 = '47.num'
mknod(/numbers/47.num, 100664) -> 0
+ storage_stat(/numbers/47.num)
getattr(/numbers/47.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/47.num)
access(/numbers/47.num, 0000) -> 0
open(/numbers/47.num) -> 0
ioctl(/numbers/47.num, 21505, ...) -> -1
+ alloc_inode() -> 73
+ copy( 10{size=0) ) ...
node_10{ptrs: [15, 52], indir:53 size: 0}
+ end of copy_inode( 10{size=0} ) -> 73{size=0}
+ writing to page: 10
+ grow_inode( ... , 3) 
node_73{ptrs: [87, 0], indir:0 size: 0}
+ alloc_page() -> 87
+ alloc_inode() -> 81
+ copy( 80{size=1504) ) ...
node_80{ptrs: [94, 0], indir:0 size: 1504}
+ alloc_page() -> 95
+ end of copy_inode( 80{size=1504} ) -> 81{size=1504}
	[DEBUG] old inum: 10; new inum: 73
+ alloc_inode() -> 89
+ copy( 88{size=192) ) ...
node_88{ptrs: [102, 0], indir:0 size: 192}
+ alloc_page() -> 103
+ end of copy_inode( 88{size=192} ) -> 89{size=192}
	[DEBUG] old inum: 80; new inum: 81
	[DEBUG] adding root (/): 89
+ add_root(89, write /numbers/47.num) -> ...
+ free_inode(14)...
+ shrink_inode( ... , 0) 
node_14{ptrs: [16, 17], indir:61 size: 0}
node_14{ptrs: [16, 17], indir:61 size: 0}
+ free_inode(74)...
+ shrink_inode( ... , 0) 
node_74{ptrs: [88, 0], indir:0 size: 1312}
pnum(74[0]): 88


+ free_page(88)




node_74{ptrs: [88, 0], indir:0 size: 0}
+ free_inode(82)...
+ shrink_inode( ... , 0) 
node_82{ptrs: [96, 0], indir:0 size: 192}
pnum(82[0]): 96


+ free_page(96)




node_82{ptrs: [96, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/40.num r=82}, {write /numbers/41.num}) -> 0
... new version: -> 63 
write(/numbers/47.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/48.num)
getattr(/numbers/48.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/48.num, 33204)
+ alloc_inode() -> 14
+ grow_inode( ... , 1536) 
node_81{ptrs: [95, 0], indir:0 size: 1504}
+ dirent_14 = '48.num'
mknod(/numbers/48.num, 100664) -> 0
+ storage_stat(/numbers/48.num)
getattr(/numbers/48.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/48.num)
access(/numbers/48.num, 0000) -> 0
open(/numbers/48.num) -> 0
ioctl(/numbers/48.num, 21505, ...) -> -1
+ alloc_inode() -> 74
+ copy( 14{size=0) ) ...
node_14{ptrs: [16, 17], indir:61 size: 0}
+ end of copy_inode( 14{size=0} ) -> 74{size=0}
+ writing to page: 14
+ grow_inode( ... , 3) 
node_74{ptrs: [88, 0], indir:0 size: 0}
+ alloc_page() -> 88
+ alloc_inode() -> 82
+ copy( 81{size=1536) ) ...
node_81{ptrs: [95, 0], indir:0 size: 1536}
+ alloc_page() -> 96
+ end of copy_inode( 81{size=1536} ) -> 82{size=1536}
	[DEBUG] old inum: 14; new inum: 74
+ alloc_inode() -> 90
+ copy( 89{size=192) ) ...
node_89{ptrs: [103, 0], indir:0 size: 192}
+ alloc_page() -> 104
+ end of copy_inode( 89{size=192} ) -> 90{size=192}
	[DEBUG] old inum: 81; new inum: 82
	[DEBUG] adding root (/): 90
+ add_root(90, write /numbers/48.num) -> ...
+ free_inode(43)...
+ shrink_inode( ... , 0) 
node_43{ptrs: [38, 0], indir:0 size: 0}
node_43{ptrs: [38, 0], indir:0 size: 0}
+ free_inode(75)...
+ shrink_inode( ... , 0) 
node_75{ptrs: [89, 0], indir:0 size: 1344}
pnum(75[0]): 89


+ free_page(89)




node_75{ptrs: [89, 0], indir:0 size: 0}
+ free_inode(83)...
+ shrink_inode( ... , 0) 
node_83{ptrs: [97, 0], indir:0 size: 192}
pnum(83[0]): 97


+ free_page(97)




node_83{ptrs: [97, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/41.num r=83}, {write /numbers/42.num}) -> 0
... new version: -> 64 
write(/numbers/48.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/49.num)
getattr(/numbers/49.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/49.num, 33204)
+ alloc_inode() -> 43
+ grow_inode( ... , 1568) 
node_82{ptrs: [96, 0], indir:0 size: 1536}
+ dirent_43 = '49.num'
mknod(/numbers/49.num, 100664) -> 0
+ storage_stat(/numbers/49.num)
getattr(/numbers/49.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/49.num)
access(/numbers/49.num, 0000) -> 0
open(/numbers/49.num) -> 0
ioctl(/numbers/49.num, 21505, ...) -> -1
+ alloc_inode() -> 75
+ copy( 43{size=0) ) ...
node_43{ptrs: [38, 0], indir:0 size: 0}
+ end of copy_inode( 43{size=0} ) -> 75{size=0}
+ writing to page: 43
+ grow_inode( ... , 3) 
node_75{ptrs: [89, 0], indir:0 size: 0}
+ alloc_page() -> 89
+ alloc_inode() -> 83
+ copy( 82{size=1568) ) ...
node_82{ptrs: [96, 0], indir:0 size: 1568}
+ alloc_page() -> 97
+ end of copy_inode( 82{size=1568} ) -> 83{size=1568}
	[DEBUG] old inum: 43; new inum: 75
+ alloc_inode() -> 91
+ copy( 90{size=192) ) ...
node_90{ptrs: [104, 0], indir:0 size: 192}
+ alloc_page() -> 105
+ end of copy_inode( 90{size=192} ) -> 91{size=192}
	[DEBUG] old inum: 82; new inum: 83
	[DEBUG] adding root (/): 91
+ add_root(91, write /numbers/49.num) -> ...
+ free_inode(21)...
+ shrink_inode( ... , 0) 
node_21{ptrs: [26, 27], indir:28 size: 0}
node_21{ptrs: [26, 27], indir:28 size: 0}
+ free_inode(76)...
+ shrink_inode( ... , 0) 
node_76{ptrs: [90, 0], indir:0 size: 1376}
pnum(76[0]): 90


+ free_page(90)




node_76{ptrs: [90, 0], indir:0 size: 0}
+ free_inode(84)...
+ shrink_inode( ... , 0) 
node_84{ptrs: [98, 0], indir:0 size: 192}
pnum(84[0]): 98


+ free_page(98)




node_84{ptrs: [98, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/42.num r=84}, {write /numbers/43.num}) -> 0
... new version: -> 65 
write(/numbers/49.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers/50.num)
getattr(/numbers/50.num) -> (-2) {mode: 0000, size: 0}
+ mknod (/numbers/50.num, 33204)
+ alloc_inode() -> 21
+ grow_inode( ... , 1600) 
node_83{ptrs: [97, 0], indir:0 size: 1568}
+ dirent_21 = '50.num'
mknod(/numbers/50.num, 100664) -> 0
+ storage_stat(/numbers/50.num)
getattr(/numbers/50.num) -> (0) {mode: 100664, size: 0}
+ storage_stat(/numbers/50.num)
access(/numbers/50.num, 0000) -> 0
open(/numbers/50.num) -> 0
ioctl(/numbers/50.num, 21505, ...) -> -1
+ alloc_inode() -> 76
+ copy( 21{size=0) ) ...
node_21{ptrs: [26, 27], indir:28 size: 0}
+ end of copy_inode( 21{size=0} ) -> 76{size=0}
+ writing to page: 21
+ grow_inode( ... , 3) 
node_76{ptrs: [90, 0], indir:0 size: 0}
+ alloc_page() -> 90
+ alloc_inode() -> 84
+ copy( 83{size=1600) ) ...
node_83{ptrs: [97, 0], indir:0 size: 1600}
+ alloc_page() -> 98
+ end of copy_inode( 83{size=1600} ) -> 84{size=1600}
	[DEBUG] old inum: 21; new inum: 76
+ alloc_inode() -> 92
+ copy( 91{size=192) ) ...
node_91{ptrs: [105, 0], indir:0 size: 192}
+ alloc_page() -> 106
+ end of copy_inode( 91{size=192} ) -> 92{size=192}
	[DEBUG] old inum: 83; new inum: 84
	[DEBUG] adding root (/): 92
+ add_root(92, write /numbers/50.num) -> ...
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 32], indir:33 size: 0}
node_3{ptrs: [8, 32], indir:33 size: 0}
+ free_inode(77)...
+ shrink_inode( ... , 0) 
node_77{ptrs: [91, 0], indir:0 size: 1408}
pnum(77[0]): 91


+ free_page(91)




node_77{ptrs: [91, 0], indir:0 size: 0}
+ free_inode(85)...
+ shrink_inode( ... , 0) 
node_85{ptrs: [99, 0], indir:0 size: 192}
pnum(85[0]): 99


+ free_page(99)




node_85{ptrs: [99, 0], indir:0 size: 0}
+ traverse_and_free ({write /numbers/43.num r=85}, {write /numbers/44.num}) -> 0
... new version: -> 66 
write(/numbers/50.num, 3 bytes, @+0) -> 3
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1600}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/numbers/10.num)
access(/numbers/10.num, 0000) -> 0
open(/numbers/10.num) -> 0
ioctl(/numbers/10.num, 21505, ...) -> -1
+ storage_stat(/numbers/10.num)
getattr(/numbers/10.num) -> (0) {mode: 100664, size: 3}
+ storage_read(/numbers/10.num); inode 36
node_36{ptrs: [31, 0], indir:0 size: 3}
read(/numbers/10.num, 4096 bytes, @+0) -> 3
+ storage_stat(/numbers/10.num)
getattr(/numbers/10.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/20.num)
access(/numbers/20.num, 0000) -> 0
open(/numbers/20.num) -> 0
ioctl(/numbers/20.num, 21505, ...) -> -1
+ storage_stfusermount -u mnt || true
at(/numbers/20.num)
getattr(/numbers/20.num) -> (0) {mode: 100664, size: 3}
+ storage_read(/numbers/20.num); inode 41
node_41{ptrs: [36, 0], indir:0 size: 3}
read(/numbers/20.num, 4096 bytes, @+0) -> 3
+ storage_stat(/numbers/20.num)
getattr(/numbers/20.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/30.num)
access(/numbers/30.num, 0000) -> 0
open(/numbers/30.num) -> 0
ioctl(/numbers/30.num, 21505, ...) -> -1
+ storage_stat(/numbers/30.num)
getattr(/numbers/30.num) -> (0) {mode: 100664, size: 3}
+ storage_read(/numbers/30.num); inode 56
node_56{ptrs: [52, 0], indir:0 size: 3}
read(/numbers/30.num, 4096 bytes, @+0) -> 3
+ storage_stat(/numbers/30.num)
getattr(/numbers/30.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/40.num)
access(/numbers/40.num, 0000) -> 0
open(/numbers/40.num) -> 0
ioctl(/numbers/40.num, 21505, ...) -> -1
+ storage_stat(/numbers/40.num)
getattr(/numbers/40.num) -> (0) {mode: 100664, size: 3}
+ storage_read(/numbers/40.num); inode 66
node_66{ptrs: [64, 0], indir:0 size: 3}
read(/numbers/40.num, 4096 bytes, @+0) -> 3
+ storage_stat(/numbers/40.num)
getattr(/numbers/40.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/50.num)
access(/numbers/50.num, 0000) -> 0
open(/numbers/50.num) -> 0
ioctl(/numbers/50.num, 21505, ...) -> -1
+ storage_stat(/numbers/50.num)
getattr(/numbers/50.num) -> (0) {mode: 100664, size: 3}
+ storage_read(/numbers/50.num); inode 76
node_76{ptrs: [90, 0], indir:0 size: 3}
read(/numbers/50.num, 4096 bytes, @+0) -> 3
+ storage_stat(/numbers/50.num)
getattr(/numbers/50.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/7.num)
getattr(/numbers/7.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/7.num)
access(/numbers/7.num, 0002) -> 0
+ free_inode(47)...
+ shrink_inode( ... , 0) 
node_47{ptrs: [41, 0], indir:0 size: 2}
pnum(47[0]): 41


+ free_page(41)




node_47{ptrs: [41, 0], indir:0 size: 0}
+ shrink_inode( ... , 1568) 
node_84{ptrs: [98, 0], indir:0 size: 1600}
unlink(/numbers/7.num) -> 0
+ storage_stat(/numbers/14.num)
getattr(/numbers/14.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/14.num)
access(/numbers/14.num, 0002) -> 0
+ free_inode(45)...
+ shrink_inode( ... , 0) 
node_45{ptrs: [17, 0], indir:0 size: 3}
pnum(45[0]): 17


+ free_page(17)




node_45{ptrs: [17, 0], indir:0 size: 0}
+ shrink_inode( ... , 1536) 
node_84{ptrs: [98, 0], indir:0 size: 1568}
unlink(/numbers/14.num) -> 0
+ storage_stat(/numbers/21.num)
getattr(/numbers/21.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/21.num)
access(/numbers/21.num, 0002) -> 0
+ free_inode(44)...
+ shrink_inode( ... , 0) 
node_44{ptrs: [38, 0], indir:0 size: 3}
pnum(44[0]): 38


+ free_page(38)




node_44{ptrs: [38, 0], indir:0 size: 0}
+ shrink_inode( ... , 1504) 
node_84{ptrs: [98, 0], indir:0 size: 1536}
unlink(/numbers/21.num) -> 0
+ storage_stat(/numbers/28.num)
getattr(/numbers/28.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/28.num)
access(/numbers/28.num, 0002) -> 0
+ free_inode(54)...
+ shrink_inode( ... , 0) 
node_54{ptrs: [50, 0], indir:0 size: 3}
pnum(54[0]): 50


+ free_page(50)




node_54{ptrs: [50, 0], indir:0 size: 0}
+ shrink_inode( ... , 1472) 
node_84{ptrs: [98, 0], indir:0 size: 1504}
unlink(/numbers/28.num) -> 0
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/40k.txt)
getattr(/40k.txt) -> (0) {mode: 100664, size: 40001}
+ storage_stat(/def.txt)
getattr(/def.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/2k.txt)
getattr(/2k.txt) -> (0) {mode: 100664, size: 2001}
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/numbers/46.num)
getattr(/numbers/46.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/45.num)
getattr(/numbers/45.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/44.num)
getattr(/numbers/44.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/43.num)
getattr(/numbers/43.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/42.num)
getattr(/numbers/42.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/41.num)
getattr(/numbers/41.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/40.num)
getattr(/numbers/40.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/39.num)
getattr(/numbers/39.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/38.num)
getattr(/numbers/38.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/37.num)
getattr(/numbers/37.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/36.num)
getattr(/numbers/36.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/35.num)
getattr(/numbers/35.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/34.num)
getattr(/numbers/34.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/33.num)
getattr(/numbers/33.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/32.num)
getattr(/numbers/32.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/31.num)
getattr(/numbers/31.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/30.num)
getattr(/numbers/30.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/29.num)
getattr(/numbers/29.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/47.num)
getattr(/numbers/47.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/27.num)
getattr(/numbers/27.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/26.num)
getattr(/numbers/26.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/25.num)
getattr(/numbers/25.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/24.num)
getattr(/numbers/24.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/23.num)
getattr(/numbers/23.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/22.num)
getattr(/numbers/22.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/numbers/48.num)
getattr(/numbers/48.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/20.num)
getattr(/numbers/20.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/19.num)
getattr(/numbers/19.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/18.num)
getattr(/numbers/18.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/17.num)
getattr(/numbers/17.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/16.num)
getattr(/numbers/16.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/15.num)
getattr(/numbers/15.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/49.num)
getattr(/numbers/49.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/13.num)
getattr(/numbers/13.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/12.num)
getattr(/numbers/12.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/11.num)
getattr(/numbers/11.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/10.num)
getattr(/numbers/10.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/9.num)
getattr(/numbers/9.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/8.num)
getattr(/numbers/8.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/50.num)
getattr(/numbers/50.num) -> (0) {mode: 100664, size: 3}
+ storage_stat(/numbers/6.num)
getattr(/numbers/6.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/5.num)
getattr(/numbers/5.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/4.num)
getattr(/numbers/4.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/3.num)
getattr(/numbers/3.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/2.num)
getattr(/numbers/2.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/numbers/1.num)
getattr(/numbers/1.num) -> (0) {mode: 100664, size: 2}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5/hello.txt)
getattr(/dir1/dir2/dir3/dir4/dir5/hello.txt) -> (0) {mode: 100664, size: 12}
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/foo/abc.txt)
getattr(/foo/abc.txt) -> (0) {mode: 100664, size: 11}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -fusermount -u mnt || true
> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/dir1) -> 0
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1)
getattr(/dir1) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2) -> 0
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2)
getattr(/dir1/dir2) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3)
getattr(/dir1/dir2/dir3) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4) -> 0
+ storage_stat(/dir1/dir2/dir3/dir4/dir5)
getattr(/dir1/dir2/dir3/dir4/dir5) -> (0) {mode: 40775, size: 32}
+ storage_stat(/dir1/dir2/dir3/dir4)
getattr(/dir1/dir2/dir3/dir4) -> (0) {mode: 40775, size: 32}
readdir(/dir1/dir2/dir3/dir4/dir5) -> 0
+ storage_stat(/foo)
getattr(/foo) -> (0) {mode: 40775, size: 32}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/foo) -> 0
+ storage_stat(/numbers)
getattr(/numbers) -> (0) {mode: 40775, size: 1472}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/numbers) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
mkdir -p mnt || true
if [ ! -e disk0.cow ]; then ./cowtool new disk0.cow; fi
+ storage_init(disk0.cow);
+ alloc_page() -> 1
+ root_init() -> 1
+ alloc_page() -> 2
+ alloc_page() -> 3
+ alloc_page() -> 4
+ alloc_page() -> 5
+ alloc_inode() -> 0
+ add_root(0, init disk0.cow) -> ...
... new version: -> 1 
Created disk image: disk0.cow
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 0}
readdir(/) -> 0
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/x1.txt, 33204)
+ alloc_inode() -> 1
+ grow_inode( ... , 32) 
node_0{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 6
+ dirent_1 = 'x1.txt'
mknod(/x1.txt, 100664) -> 0
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/x1.txt)
access(/x1.txt, 0000) -> 0
open(/x1.txt) -> 0
ioctl(/x1.txt, 21505, ...) -> -1
+ alloc_inode() -> 2
+ copy( 1{size=0) ) ...
node_1{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 1{size=0} ) -> 2{size=0}
+ writing to page: 1
+ grow_inode( ... , 8) 
node_2{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 7
+ alloc_inode() -> 3
+ copy( 0{size=32) ) ...
node_0{ptrs: [6, 0], indir:0 size: 32}
+ alloc_page() -> 8
+ end of copy_inode( 0{size=32} ) -> 3{size=32}
	[DEBUG] old inum: 1; new inum: 2
	[DEBUG] adding root (/): 3
+ add_root(3, write /x1.txt) -> ...
... new version: -> 2 
write(/x1.txt, 8 bytes, @+0) -> 8
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/x2.txt, 33204)
+ alloc_inode() -> 4
+ grow_inode( ... , 64) 
node_3{ptrs: [8, 0], indir:0 size: 32}
+ dirent_4 = 'x2.txt'
mknod(/x2.txt, 100664) -> 0
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/x2.txt)
access(/x2.txt, 0000) -> 0
open(/x2.txt) -> 0
ioctl(/x2.txt, 21505, ...) -> -1
+ alloc_inode() -> 5
+ copy( 4{size=0) ) ...
node_4{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 4{size=0} ) -> 5{size=0}
+ writing to page: 4
+ grow_inode( ... , 8) 
node_5{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 9
+ alloc_inode() -> 6
+ copy( 3{size=64) ) ...
node_3{ptrs: [8, 0], indir:0 size: 64}
+ alloc_page() -> 10
+ end of copy_inode( 3{size=64} ) -> 6{size=64}
	[DEBUG] old inum: 4; new inum: 5
	[DEBUG] adding root (/): 6
+ add_root(6, write /x2.txt) -> ...
... new version: -> 3 
write(/x2.txt, 8 bytes, @+0) -> 8
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/x3.txt, 33204)
+ alloc_inode() -> 7
+ grow_inode( ... , 96) 
node_6{ptrs: [10, 0], indir:0 size: 64}
+ dirent_7 = 'x3.txt'
mknod(/x3.txt, 100664) -> 0
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/x3.txt)
access(/x3.txt, 0000) -> 0
open(/x3.txt) -> 0
ioctl(/x3.txt, 21505, ...) -> -1
+ alloc_inode() -> 8
+ copy( 7{size=0) ) ...
node_7{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 7{size=0} ) -> 8{size=0}
+ writing to page: 7
+ grow_inode( ... , 8) 
node_8{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 11
+ alloc_inode() -> 9
+ copy( 6{size=96) ) ...
node_6{ptrs: [10, 0], indir:0 size: 96}
+ alloc_page() -> 12
+ end of copy_inode( 6{size=96} ) -> 9{size=96}
	[DEBUG] old inum: 7; new inum: 8
	[DEBUG] adding root (/): 9
+ add_root(9, write /x3.txt) -> ...
... new version: -> 4 
write(/x3.txt, 8 bytes, @+0) -> 8
+ storage_stat(/x4.txt)
getattr(/x4.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/x4.txt, 33204)
+ alloc_inode() -> 10
+ grow_inode( ... , 128) 
node_9{ptrs: [12, 0], indir:0 size: 96}
+ dirent_10 = 'x4.txt'
mknod(/x4.txt, 100664) -> 0
+ storage_stat(/x4.txt)
getattr(/x4.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/x4.txt)
access(/x4.txt, 0000) -> 0
open(/x4.txt) -> 0
ioctl(/x4.txt, 21505, ...) -> -1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ alloc_inode() -> 11
+ copy( 10{size=0) ) ...
node_10{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 10{size=0} ) -> 11{size=0}
+ writing to page: 10
+ grow_inode( ... , 8) 
node_11{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 13
+ alloc_inode() -> 12
+ copy( 9{size=128) ) ...
node_9{ptrs: [12, 0], indir:0 size: 128}
+ alloc_page() -> 14
+ end of copy_inode( 9{size=128} ) -> 12{size=128}
	[DEBUG] old inum: 10; new inum: 11
	[DEBUG] adding root (/): 12
+ add_root(12, write /x4.txt) -> ...
... new version: -> 5 
write(/x4.txt, 8 bytes, @+0) -> 8
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/x5.txt, 33204)
+ alloc_inode() -> 13
+ grow_inode( ... , 160) 
node_12{ptrs: [14, 0], indir:0 size: 128}
+ dirent_13 = 'x5.txt'
mknod(/x5.txt, 100664) -> 0
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/x5.txt)
access(/x5.txt, 0000) -> 0
open(/x5.txt) -> 0
ioctl(/x5.txt, 21505, ...) -> -1
+ alloc_inode() -> 14
+ copy( 13{size=0) ) ...
fusermount -u mnt || true
node_13{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 13{size=0} ) -> 14{size=0}
+ writing to page: 13
+ grow_inode( ... , 8) 
node_14{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 15
+ alloc_inode() -> 15
+ copy( 12{size=160) ) ...
node_12{ptrs: [14, 0], indir:0 size: 160}
+ alloc_page() -> 16
+ end of copy_inode( 12{size=160} ) -> 15{size=160}
	[DEBUG] old inum: 13; new inum: 14
	[DEBUG] adding root (/): 15
+ add_root(15, write /x5.txt) -> ...
... new version: -> 6 
write(/x5.txt, 8 bytes, @+0) -> 8
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x4.txt)
getattr(/x4.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
+ storfusermount -u mnt || true
age_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ free_inode(11)...
+ shrink_inode( ... , 0) 
node_11{ptrs: [13, 0], indir:0 size: 8}
pnum(11[0]): 13


+ free_page(13)




node_11{ptrs: [13, 0], indir:0 size: 0}
+ shrink_inode( ... , 128) 
node_15{ptrs: [16, 0], indir:0 size: 160}
unlink(/x4.txt) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storfusermount -u mnt || true
age_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/x4.txt)
getattr(/x4.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storfusermount -u mnt || true
age_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 128}
readdir(/) -> 0
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (-2) {mode: 0000, size: 0}
+ mknod (/mknod.txt, 33204)
+ alloc_inode() -> 11
+ grow_inode( ... , 160) 
node_15{ptrs: [16, 0], indir:0 size: 128}
+ dirent_11 = 'mknod.txt'
mknod(/mknod.txt, 100664) -> 0
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 0}
+ storage_stat(/mknod.txt)
access(/mknod.txt, 0000) -> 0
open(/mknod.txt) -> 0
ioctl(/mknod.txt, 21505, ...) -> -1
+ alloc_inode() -> 16
+ copy( 11{size=0) ) ...
node_11{ptrs: [13, 0], indir:0 size: 0}
+ end of copy_inode( 11{size=0} ) -> 16{size=0}
+ writing to page: 11
+ grow_inode( ... , 6) 
node_16{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 13
+ alloc_inode() -> 17
+ copy( 15{size=160) ) ...
node_15{ptrs: [16, 0], indir:0 size: 160}
+ alloc_page() -> 17
+ end of copy_inode( 15{size=160} ) -> 17{size=160}
	[DEBUG] old inum: 11; new inum: 16
	[DEBUG] adding root (/): 17
+ add_root(17, write /mknod.txt) -> ...
... new version: -> 7 
write(/mknod.txt, 6 bytes, @+0) -> 6
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 6}
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
fusermount -u mnt || true
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/x3.txt)
access(/x3.txt, 0000) -> 0
open(/x3.txt) -> 0
ioctl(/x3.txt, 21505, ...) -> -1
+ storage_read(/x3.txt); inode 8
node_8{ptrs: [11, 0], indir:0 size: 8}
read(/x3.txt, 4096 bytes, @+0) -> 8
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
access(/x3.txt, 0000) -> 0
open(/x3.txt) -> 0
+ shrink_inode( ... , 0) 
node_8{ptrs: [11, 0], indir:0 size: 8}
pnum(8[0]): 11


+ free_page(11)




truncate(/x3.txt, 0 bytes) -> 0
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 0}
ioctl(/x3.txt, 21505, ...) -> -1
+ alloc_inode() -> 18
+ copy( 8{size=0) ) ...
node_8{ptrs: [11, 0], indir:0 size: 0}
+ end of copy_inode( 8{size=0} ) -> 18{size=0}
+ writing to page: 8
+ grow_inode( ... , 44) 
node_18{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 11
+ alloc_inode() -> 19
+ copy( 17{size=160) ) ...
node_17{ptrs: [17, 0], indir:0 size: 160}
+ alloc_page() -> 18
+ end of copy_inode( 17{size=160} ) -> 19{size=160}
	[DEBUG] old inum: 8; new inum: 18
	[DEBUG] adding root (/): 19
+ add_root(19, write /x3.txt) -> ...
... new version: -> 8 
write(/x3.txt, 44 bytes, @+0) -> 44
+ storage_stat(/x3.txt)
access(/x3.txt, 0000) -> 0
open(/x3.txt) -> 0
ioctl(/x3.txt, 21505, ...) -> -1
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_read(/x3.txt); inode 18
node_18{ptrs: [11, 0], indir:0 size: 44}
read(/x3.txt, 4096 bytes, @+0) -> 44
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 6}
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}fusermount -u mnt || true

+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/x3.txt)
access(/x3.txt, 0000) -> 0
open(/x3.txt) -> 0
ioctl(/x3.txt, 21505, ...) -> -1
+ storage_read(/x3.txt); inode 18
node_18{ptrs: [11, 0], indir:0 size: 44}
read(/x3.txt, 4096 bytes, @+0) -> 44
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 6}
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}fusermount -u mnt || true

+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 160}
readdir(/) -> 0
+ storage_stat(/)
access(/, 0001) -> 0
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (-2) {mode: 0000, size: 0}
+ grow_inode( ... , 192) 
node_19{ptrs: [18, 0], indir:0 size: 160}
+ dirent_5 = 'y2.txt'
link(/x2.txt => /y2.txt) -> 0
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/y2.txt)
access(/y2.txt, 0000) -> 0
open(/y2.txt) -> 0
ioctl(/y2.txt, 21505, ...) -> -1
+ storage_read(/y2.txt); inode 5
node_5{ptrs: [9, 0], indir:0 size: 8}
read(/y2.txt, 4096 bytes, @+0) -> 8
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/.gitignore)
getattr(/.gitignore) -> (-2) {mode: 0000, size: 0}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 6}
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 192}
readdir(/) -> 0
+ storage_stat(/.gitignore)
getattr(/.gitignore) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/twelve.dat)
getattr(/twelve.dat) -> (-2) {mode: 0000, size: 0}
+ mknod (/twelve.dat, 33204)
+ alloc_inode() -> 20
+ grow_inode( ... , 224) 
node_19{ptrs: [18, 0], indir:0 size: 192}
+ dirent_20 = 'twelve.dat'
mknod(/twelve.dat, 100664) -> 0
+ storage_stat(/twelve.dat)
getattr(/twelve.dat) -> (0) {mode: 100664, size: 0}
+ storage_stat(/twelve.dat)
access(/twelve.dat, 0000) -> 0
open(/twelve.dat) -> 0
ioctl(/twelve.dat, 21505, ...) -> -1
+ alloc_inode() -> 21
+ copy( 20{size=0) ) ...
node_20{ptrs: [0, 0], indir:0 size: 0}
+ end of copy_inode( 20{size=0} ) -> 21{size=0}
+ writing to page: 20
+ grow_inode( ... , 4096) 
node_21{ptrs: [0, 0], indir:0 size: 0}
+ alloc_page() -> 19
+ alloc_inode() -> 22
+ copy( 19{size=224) ) ...
node_19{ptrs: [18, 0], indir:0 size: 224}
+ alloc_page() -> 20
+ end of copy_inode( 19{size=224} ) -> 22{size=224}
	[DEBUG] old inum: 20; new inum: 21
	[DEBUG] adding root (/): 22
+ add_root(22, write /twelve.dat) -> ...
+ free_inode(4)...
+ shrink_inode( ... , 0) 
node_4{ptrs: [0, 0], indir:0 size: 0}
node_4{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(3)...
+ shrink_inode( ... , 0) 
node_3{ptrs: [8, 0], indir:0 size: 64}
pnum(3[0]): 8


+ free_page(8)




node_3{ptrs: [8, 0], indir:0 size: 0}
+ traverse_and_free ({write /x1.txt r=3}, {write /x2.txt}) -> 0
... new version: -> 9 
write(/twelve.dat, 4096 bytes, @+0) -> 4096
+ alloc_inode() -> 3
+ copy( 21{size=4096) ) ...
node_21{ptrs: [19, 0], indir:0 size: 4096}
+ alloc_page() -> 8
+ end of copy_inode( 21{size=4096} ) -> 3{size=4096}
+ writing to page: 21
+ grow_inode( ... , 8192) 
node_3{ptrs: [8, 0], indir:0 size: 4096}
+ alloc_page() -> 21
+ alloc_inode() -> 4
+ copy( 22{size=224) ) ...
node_22{ptrs: [20, 0], indir:0 size: 224}
+ alloc_page() -> 22
+ end of copy_inode( 22{size=224} ) -> 4{size=224}
	[DEBUG] old inum: 21; new inum: 3
	[DEBUG] adding root (/): 4
+ add_root(4, write /twelve.dat) -> ...
+ free_inode(7)...
+ shrink_inode( ... , 0) 
node_7{ptrs: [0, 0], indir:0 size: 0}
node_7{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(6)...
+ shrink_inode( ... , 0) 
node_6{ptrs: [10, 0], indir:0 size: 96}
pnum(6[0]): 10


+ free_page(10)




node_6{ptrs: [10, 0], indir:0 size: 0}
+ traverse_and_free ({write /x2.txt r=6}, {write /x3.txt}) -> 0
... new version: -> 10 
write(/twelve.dat, 4096 bytes, @+4096) -> 4096
+ alloc_inode() -> 6
+ copy( 3{size=8192) ) ...
node_3{ptrs: [8, 21], indir:0 size: 8192}
+ alloc_page() -> 10
+ alloc_page() -> 23
+ end of copy_inode( 3{size=8192} ) -> 6{size=8192}
+ writing to page: 3
+ grow_inode( ... , 12001) 
node_6{ptrs: [10, 23], indir:0 size: 8192}
+ alloc_page() -> 24
+ alloc_page() -> 25
+ alloc_inode() -> 7
+ copy( 4{size=224) ) ...
node_4{ptrs: [22, 0], indir:0 size: 224}
+ alloc_page() -> 26
+ end of copy_inode( 4{size=224} ) -> 7{size=224}
	[DEBUG] old inum: 3; new inum: 6
	[DEBUG] adding root (/): 7
+ add_root(7, write /twelve.dat) -> ...
+ free_inode(10)...
+ shrink_inode( ... , 0) 
node_10{ptrs: [0, 0], indir:0 size: 0}
node_10{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(9)...
+ shrink_inode( ... , 0) 
node_9{ptrs: [12, 0], indir:0 size: 128}
pnum(9[0]): 12


+ free_page(12)




node_9{ptrs: [12, 0], indir:0 size: 0}
+ traverse_and_free ({write /x3.txt r=9}, {write /x4.txt}) -> 0
... new version: -> 11 
write(/twelve.dat, 3809 bytes, fusermount -u mnt || true
@+8192) -> 3809
+ storage_stat(/twelve.dat)
access(/twelve.dat, 0000) -> 0
open(/twelve.dat) -> 0
ioctl(/twelve.dat, 21505, ...) -> -1
+ storage_stat(/twelve.dat)
getattr(/twelve.dat) -> (0) {mode: 100664, size: 12001}
+ storage_read(/twelve.dat); inode 6
node_6{ptrs: [10, 23], indir:24 size: 12001}
read(/twelve.dat, 4096 bytes, @+8192) -> 3809
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/twelve.dat)
getattr(/twelve.dat) -> (0) {mode: 100664, size: 12001}
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 6}
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 10066fusermount -u mnt || true
4, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/twelve.dat)
access(/twelve.dat, 0000) -> 0
open(/twelve.dat) -> 0
ioctl(/twelve.dat, 21505, ...) -> -1
+ alloc_inode() -> 9
+ copy( 6{size=12001) ) ...
node_6{ptrs: [10, 23], indir:24 size: 12001}
+ alloc_page() -> 12
+ alloc_page() -> 27
+ alloc_page() -> 28
+ alloc_page() -> 29
+ end of copy_inode( 6{size=12001} ) -> 9{size=12001}
+ writing to page: 6
+ shrink_inode( ... , 9010) 
node_9{ptrs: [12, 27], indir:28 size: 12001}
+ alloc_inode() -> 10
+ copy( 7{size=224) ) ...
node_7{ptrs: [26, 0], indir:0 size: 224}
+ alloc_page() -> 30
+ end of copy_inode( 7{size=224} ) -> 10{size=224}
	[DEBUG] old inum: 6; new inum: 9
	[DEBUG] adding root (/): 10
+ add_root(10, write /twelve.dat) -> ...
+ free_inode(13)...
+ shrink_inode( ... , 0) 
node_13{ptrs: [0, 0], indir:0 size: 0}
node_13{ptrs: [0, 0], indir:0 size: 0}
+ free_inode(12)...
+ shrink_inode( ... , 0) 
node_12{ptrs: [14, 0], indir:0 size: 160}
pnum(12[0]): 14


+ free_page(14)




node_12{ptrs: [14, 0], indir:0 size: 0}
+ traverse_and_free ({write /x4.txt r=12}, {write /x5.txt}) -> 0
... new version: -> 12 
write(/twelve.dat, 10 bytes, @+9000) -> 10
+ storage_stat(/twelve.dat)
access(/twelve.dat, 0000) -> 0
open(/twelve.dat) -> 0
ioctl(/twelve.dat, 21505, ...) -> -1
+ storage_stat(/twelve.dat)
getattr(/twelve.dat) -> (0) {mode: 100664, size: 9010}
+ storage_read(/twelve.dat); inode 9
node_9{ptrs: [12, 27], indir:28 size: 9010}
read(/twelve.dat, 4096 bytes, @+8192) -> 818
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
make disk0.cow
make[1]: Entering directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
make[1]: 'disk0.cow' is up to date.
make[1]: Leaving directory '/home/unnas/personal/systems/ch03/challenge03-cs3650'
./cowmount -s -f mnt disk0.cow
+ storage_init(disk0.cow);
+ root_init() -> 1
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
access(/, 0004) -> 0
+ storage_stat(/.Trash)
getattr(/.Trash) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.Trash-1000)
getattr(/.Trash-1000) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/.xdg-volume-info)
getattr(/.xdg-volume-info) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/autorun.inf)
getattr(/autorun.inf) -> (-2) {mode: 0000, size: 0}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/twelve.dat)
getattr(/twelve.dat) -> (0) {mode: 100664, size: 9010}
+ storage_stat(/y2.txt)
getattr(/y2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/mknod.txt)
getattr(/mknod.txt) -> (0) {mode: 100664, size: 6}
+ storage_stat(/x5.txt)
getattr(/x5.txt) -> (0) {mode: 100664fusermount -u mnt || true
, size: 8}
+ storage_stat(/x3.txt)
getattr(/x3.txt) -> (0) {mode: 100664, size: 44}
+ storage_stat(/x2.txt)
getattr(/x2.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/x1.txt)
getattr(/x1.txt) -> (0) {mode: 100664, size: 8}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
readdir(/) -> 0
+ storage_stat(/twelve.dat)
access(/twelve.dat, 0000) -> 0
open(/twelve.dat) -> 0
ioctl(/twelve.dat, 21505, ...) -> -1
+ storage_read(/twelve.dat); inode 9
node_9{ptrs: [12, 27], indir:28 size: 9010}
read(/twelve.dat, 4096 bytes, @+8192) -> 818
+ storage_stat(/)
getattr(/) -> (0) {mode: 40755, size: 224}
